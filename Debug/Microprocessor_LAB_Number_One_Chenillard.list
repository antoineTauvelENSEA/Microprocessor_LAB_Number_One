
Microprocessor_LAB_Number_One_Chenillard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  08008578  08008578  00009578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e3c  08008e3c  0000a1b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e44  08008e44  0000a1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e44  08008e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e48  08008e48  00009e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08008e4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  200001c0  08009000  0000a1c0  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08009000  0000aaa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf51  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004356  00000000  00000000  00027135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001484  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c85b  00000000  00000000  0002e38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002376f  00000000  00000000  0005abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d404  00000000  00000000  0007e356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b75a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000780c  00000000  00000000  0018b7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00192fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c0 	.word	0x200001c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008560 	.word	0x08008560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c4 	.word	0x200001c4
 80001cc:	08008560 	.word	0x08008560

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_ADC1_Init+0xe0>)
 8000584:	4a2f      	ldr	r2, [pc, #188]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_ADC1_Init+0xe0>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_ADC1_Init+0xe0>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_ADC1_Init+0xe0>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <MX_ADC1_Init+0xe0>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e2:	4817      	ldr	r0, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005e4:	f001 f9f4 	bl	80019d0 <HAL_ADC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005ee:	f000 faef 	bl	8000bd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4810      	ldr	r0, [pc, #64]	@ (8000640 <MX_ADC1_Init+0xe0>)
 80005fe:	f001 ff4f 	bl	80024a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000608:	f000 fae2 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_ADC1_Init+0xe8>)
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000610:	2306      	movs	r3, #6
 8000612:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000618:	237f      	movs	r3, #127	@ 0x7f
 800061a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061c:	2304      	movs	r3, #4
 800061e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_ADC1_Init+0xe0>)
 800062a:	f001 fb21 	bl	8001c70 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000634:	f000 facc 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200001dc 	.word	0x200001dc
 8000644:	50040000 	.word	0x50040000
 8000648:	25b00200 	.word	0x25b00200

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0ac      	sub	sp, #176	@ 0xb0
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2288      	movs	r2, #136	@ 0x88
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f007 f83d 	bl	80076ec <memset>
  if(adcHandle->Instance==ADC1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <HAL_ADC_MspInit+0xc8>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d147      	bne.n	800070c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000680:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000682:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000692:	2308      	movs	r3, #8
 8000694:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 fd55 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006b8:	f000 fa8a 	bl	8000bd0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <HAL_ADC_MspInit+0xcc>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c0:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <HAL_ADC_MspInit+0xcc>)
 80006c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <HAL_ADC_MspInit+0xcc>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <HAL_ADC_MspInit+0xcc>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ec:	2310      	movs	r3, #16
 80006ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006f2:	230b      	movs	r3, #11
 80006f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f002 f85c 	bl	80027c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070c:	bf00      	nop
 800070e:	37b0      	adds	r7, #176	@ 0xb0
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	50040000 	.word	0x50040000
 8000718:	40021000 	.word	0x40021000

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b5c      	ldr	r3, [pc, #368]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a5b      	ldr	r2, [pc, #364]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b59      	ldr	r3, [pc, #356]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b56      	ldr	r3, [pc, #344]	@ (80008a4 <MX_GPIO_Init+0x188>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a55      	ldr	r2, [pc, #340]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b53      	ldr	r3, [pc, #332]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b50      	ldr	r3, [pc, #320]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a4f      	ldr	r2, [pc, #316]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b4d      	ldr	r3, [pc, #308]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b4a      	ldr	r3, [pc, #296]	@ (80008a4 <MX_GPIO_Init+0x188>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a49      	ldr	r2, [pc, #292]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b47      	ldr	r3, [pc, #284]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_CS_Pin|LED_0_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2181      	movs	r1, #129	@ 0x81
 8000796:	4844      	ldr	r0, [pc, #272]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 8000798:	f002 f9d6 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 51cd 	mov.w	r1, #6560	@ 0x19a0
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f002 f9cf 	bl	8002b48 <HAL_GPIO_WritePin>
                          |STEPPER_ENN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 80007aa:	2200      	movs	r2, #0
 80007ac:	f24e 0136 	movw	r1, #57398	@ 0xe036
 80007b0:	483e      	ldr	r0, [pc, #248]	@ (80008ac <MX_GPIO_Init+0x190>)
 80007b2:	f002 f9c9 	bl	8002b48 <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4836      	ldr	r0, [pc, #216]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 80007ce:	f001 fff9 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_0_Pin;
 80007d2:	2381      	movs	r3, #129	@ 0x81
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	482f      	ldr	r0, [pc, #188]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 80007ea:	f001 ffeb 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAGNETO_STATUS_Pin;
 80007ee:	2302      	movs	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAGNETO_STATUS_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4829      	ldr	r0, [pc, #164]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 8000802:	f001 ffdf 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 8000806:	f44f 53cd 	mov.w	r3, #6560	@ 0x19a0
 800080a:	617b      	str	r3, [r7, #20]
                          |STEPPER_ENN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f001 ffcf 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|BTN_TOP_Pin|BTN_CENTER_Pin|BTN_RIGHT_Pin
 8000826:	f44f 735c 	mov.w	r3, #880	@ 0x370
 800082a:	617b      	str	r3, [r7, #20]
                          |BTN_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	481a      	ldr	r0, [pc, #104]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 800083e:	f001 ffc1 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAGNETO_INT_Pin|BTN_TOPB11_Pin;
 8000842:	f640 0301 	movw	r3, #2049	@ 0x801
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000848:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4814      	ldr	r0, [pc, #80]	@ (80008ac <MX_GPIO_Init+0x190>)
 800085a:	f001 ffb3 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 800085e:	f24e 0336 	movw	r3, #57398	@ 0xe036
 8000862:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_GPIO_Init+0x190>)
 8000878:	f001 ffa4 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 800087c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f001 ff95 	bl	80027c4 <HAL_GPIO_Init>

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	@ 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800
 80008ac:	48000400 	.word	0x48000400

080008b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <MX_I2C1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008bc:	4a1b      	ldr	r2, [pc, #108]	@ (800092c <MX_I2C1_Init+0x7c>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ea:	480e      	ldr	r0, [pc, #56]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008ec:	f002 f944 	bl	8002b78 <HAL_I2C_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 f96b 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008fe:	f002 fcff 	bl	8003300 <HAL_I2CEx_ConfigAnalogFilter>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 f962 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_I2C1_Init+0x74>)
 8000910:	f002 fd41 	bl	8003396 <HAL_I2CEx_ConfigDigitalFilter>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 f959 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000240 	.word	0x20000240
 8000928:	40005400 	.word	0x40005400
 800092c:	10909cec 	.word	0x10909cec

08000930 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ac      	sub	sp, #176	@ 0xb0
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2288      	movs	r2, #136	@ 0x88
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f006 fecb 	bl	80076ec <memset>
  if(i2cHandle->Instance==I2C1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a21      	ldr	r2, [pc, #132]	@ (80009e0 <HAL_I2C_MspInit+0xb0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d13a      	bne.n	80009d6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000964:	2300      	movs	r3, #0
 8000966:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fbf5 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000978:	f000 f92a 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_I2C_MspInit+0xb4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <HAL_I2C_MspInit+0xb4>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_I2C_MspInit+0xb4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000994:	23c0      	movs	r3, #192	@ 0xc0
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	2312      	movs	r3, #18
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ac:	2304      	movs	r3, #4
 80009ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009b6:	4619      	mov	r1, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <HAL_I2C_MspInit+0xb8>)
 80009ba:	f001 ff03 	bl	80027c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_I2C_MspInit+0xb4>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_I2C_MspInit+0xb4>)
 80009c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_I2C_MspInit+0xb4>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009d6:	bf00      	nop
 80009d8:	37b0      	adds	r7, #176	@ 0xb0
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	2201      	movs	r2, #1
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <__io_putchar+0x20>)
 80009fe:	f005 fae1 	bl	8005fc4 <HAL_UART_Transmit>
  return ch;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200004b8 	.word	0x200004b8

08000a10 <__io_getchar>:

int __io_getchar(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <__io_getchar+0x38>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2208      	movs	r2, #8
 8000a20:	621a      	str	r2, [r3, #32]
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a22:	1df9      	adds	r1, r7, #7
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <__io_getchar+0x38>)
 8000a2c:	f005 fb53 	bl	80060d6 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a30:	1df9      	adds	r1, r7, #7
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	2201      	movs	r2, #1
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <__io_getchar+0x38>)
 8000a3a:	f005 fac3 	bl	8005fc4 <HAL_UART_Transmit>
  return ch;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200004b8 	.word	0x200004b8

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 fdf2 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f82c 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f7ff fe60 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a5c:	f000 fcf0 	bl	8001440 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a60:	f7ff ff26 	bl	80008b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000a64:	f000 f8ba 	bl	8000bdc <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a68:	f000 faf0 	bl	800104c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a6c:	f000 fb42 	bl	80010f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a70:	f000 fcb6 	bl	80013e0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000a74:	f7ff fd74 	bl	8000560 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000a78:	f000 fbb4 	bl	80011e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  printf("I'm alive ! \r\n");
 8000a7c:	4808      	ldr	r0, [pc, #32]	@ (8000aa0 <main+0x54>)
 8000a7e:	f006 fd35 	bl	80074ec <puts>
  ssd1315_Init();
 8000a82:	f006 f969 	bl	8006d58 <ssd1315_Init>
  ssd1315_Draw_String(0,0,"WELCOME ENSEA",&Font_7x10);
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <main+0x58>)
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <main+0x5c>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f006 fa7f 	bl	8006f90 <ssd1315_Draw_String>
  ssd1315_Refresh();
 8000a92:	f006 f9fd 	bl	8006e90 <ssd1315_Refresh>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <main+0x60>)
 8000a98:	f004 f916 	bl	8004cc8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <main+0x50>
 8000aa0:	08008578 	.word	0x08008578
 8000aa4:	200000bc 	.word	0x200000bc
 8000aa8:	08008588 	.word	0x08008588
 8000aac:	200003e4 	.word	0x200003e4

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	@ 0x58
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2244      	movs	r2, #68	@ 0x44
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fe14 	bl	80076ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ad2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ad6:	f002 fcb9 	bl	800344c <HAL_PWREx_ControlVoltageScaling>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae0:	f000 f876 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af6:	2302      	movs	r3, #2
 8000af8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000afe:	230a      	movs	r3, #10
 8000b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fcf0 	bl	80034f8 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b1e:	f000 f857 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 f8b8 	bl	8003cb0 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f843 	bl	8000bd0 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3758      	adds	r7, #88	@ 0x58
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	static int taskNumber=0;
	  if(htim->Instance == TIM4)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d121      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x56>
	  	{
	  		taskNumber=(taskNumber+1)%3;
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1c59      	adds	r1, r3, #1
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b6e:	fb83 3201 	smull	r3, r2, r3, r1
 8000b72:	17cb      	asrs	r3, r1, #31
 8000b74:	1ad2      	subs	r2, r2, r3
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b80:	601a      	str	r2, [r3, #0]
	  		switch	(taskNumber){
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d00c      	beq.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x50>
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	dc0d      	bgt.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x56>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x44>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d003      	beq.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000b96:	e008      	b.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x56>
	  			case 0 : 	taskLED();
 8000b98:	f006 faba 	bl	8007110 <taskLED>
	  						break;
 8000b9c:	e005      	b.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x56>
	  			case 1 : 	taskButton();
 8000b9e:	f006 fae7 	bl	8007170 <taskButton>
	  						break;
 8000ba2:	e002      	b.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x56>
	  			case 2 : 	taskScreen();
 8000ba4:	f006 fb34 	bl	8007210 <taskScreen>
	  						break;
 8000ba8:	bf00      	nop
	  		}
	  	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x64>
    HAL_IncTick();
 8000bb4:	f000 fd60 	bl	8001678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40000800 	.word	0x40000800
 8000bc4:	20000294 	.word	0x20000294
 8000bc8:	55555556 	.word	0x55555556
 8000bcc:	40001000 	.word	0x40001000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000be2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c54 <MX_SPI2_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000be8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000bf6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c36:	2208      	movs	r2, #8
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_SPI2_Init+0x74>)
 8000c3c:	f003 ff4a 	bl	8004ad4 <HAL_SPI_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c46:	f7ff ffc3 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000298 	.word	0x20000298
 8000c54:	40003800 	.word	0x40003800

08000c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a25      	ldr	r2, [pc, #148]	@ (8000d0c <HAL_SPI_MspInit+0xb4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d144      	bne.n	8000d04 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c7a:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	4a24      	ldr	r2, [pc, #144]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <HAL_SPI_MspInit+0xbc>)
 8000cde:	f001 fd71 	bl	80027c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf4:	2305      	movs	r3, #5
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <HAL_SPI_MspInit+0xc0>)
 8000d00:	f001 fd60 	bl	80027c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	@ 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40003800 	.word	0x40003800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000400 	.word	0x48000400

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	@ 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d72:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <HAL_InitTick+0xe0>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a33      	ldr	r2, [pc, #204]	@ (8000e44 <HAL_InitTick+0xe0>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <HAL_InitTick+0xe0>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d8a:	f107 0210 	add.w	r2, r7, #16
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 f94f 	bl	8004038 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d103      	bne.n	8000dac <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da4:	f003 f91c 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8000da8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000daa:	e004      	b.n	8000db6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dac:	f003 f918 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8000db0:	4603      	mov	r3, r0
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db8:	4a23      	ldr	r2, [pc, #140]	@ (8000e48 <HAL_InitTick+0xe4>)
 8000dba:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbe:	0c9b      	lsrs	r3, r3, #18
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dc6:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <HAL_InitTick+0xec>)
 8000dc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dea:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dec:	f003 ff15 	bl	8004c1a <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000df6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d11b      	bne.n	8000e36 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dfe:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000e00:	f003 ff62 	bl	8004cc8 <HAL_TIM_Base_Start_IT>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d111      	bne.n	8000e36 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e12:	2036      	movs	r0, #54	@ 0x36
 8000e14:	f001 fcc8 	bl	80027a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d808      	bhi.n	8000e30 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	2036      	movs	r0, #54	@ 0x36
 8000e24:	f001 fca4 	bl	8002770 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e28:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_InitTick+0xf0>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e002      	b.n	8000e36 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3738      	adds	r7, #56	@ 0x38
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	200002fc 	.word	0x200002fc
 8000e50:	40001000 	.word	0x40001000
 8000e54:	20000004 	.word	0x20000004

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM4_IRQHandler+0x10>)
 8000ebe:	f004 f87a 	bl	8004fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200003e4 	.word	0x200003e4

08000ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM6_DAC_IRQHandler+0x10>)
 8000ed2:	f004 f870 	bl	8004fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002fc 	.word	0x200002fc

08000ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef2:	f7ff fd8d 	bl	8000a10 <__io_getchar>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
  }

  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e009      	b.n	8000f40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fd59 	bl	80009ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf1      	blt.n	8000f2c <_write+0x12>
  }
  return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_close>:

int _close(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_isatty>:

int _isatty(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f006 fbcc 	bl	8007788 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20018000 	.word	0x20018000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000348 	.word	0x20000348
 8001024:	20000aa8 	.word	0x20000aa8

08001028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	@ 0x30
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2224      	movs	r2, #36	@ 0x24
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f006 fb46 	bl	80076ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 800106c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001092:	2301      	movs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 80010be:	f003 fed4 	bl	8004e6a <HAL_TIM_Encoder_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010c8:	f7ff fd82 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_TIM2_Init+0xa4>)
 80010da:	f004 fe7f 	bl	8005ddc <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80010e4:	f7ff fd74 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3730      	adds	r7, #48	@ 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000034c 	.word	0x2000034c

080010f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	@ 0x38
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001126:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <MX_TIM3_Init+0xe8>)
 8001128:	4a2d      	ldr	r2, [pc, #180]	@ (80011e0 <MX_TIM3_Init+0xec>)
 800112a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800112c:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <MX_TIM3_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MX_TIM3_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <MX_TIM3_Init+0xe8>)
 800113a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800113e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <MX_TIM3_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <MX_TIM3_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114c:	4823      	ldr	r0, [pc, #140]	@ (80011dc <MX_TIM3_Init+0xe8>)
 800114e:	f003 fd64 	bl	8004c1a <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001158:	f7ff fd3a 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001166:	4619      	mov	r1, r3
 8001168:	481c      	ldr	r0, [pc, #112]	@ (80011dc <MX_TIM3_Init+0xe8>)
 800116a:	f004 f93b 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001174:	f7ff fd2c 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001178:	4818      	ldr	r0, [pc, #96]	@ (80011dc <MX_TIM3_Init+0xe8>)
 800117a:	f003 fe15 	bl	8004da8 <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001184:	f7ff fd24 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4811      	ldr	r0, [pc, #68]	@ (80011dc <MX_TIM3_Init+0xe8>)
 8001198:	f004 fe20 	bl	8005ddc <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011a2:	f7ff fd15 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	@ 0x60
 80011a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4807      	ldr	r0, [pc, #28]	@ (80011dc <MX_TIM3_Init+0xe8>)
 80011be:	f003 fffd 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011c8:	f7ff fd02 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <MX_TIM3_Init+0xe8>)
 80011ce:	f000 f8d1 	bl	8001374 <HAL_TIM_MspPostInit>

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	@ 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000398 	.word	0x20000398
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001204:	4a1d      	ldr	r2, [pc, #116]	@ (800127c <MX_TIM4_Init+0x98>)
 8001206:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_TIM4_Init+0x94>)
 800120a:	224f      	movs	r2, #79	@ 0x4f
 800120c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001216:	f242 720f 	movw	r2, #9999	@ 0x270f
 800121a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_TIM4_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001228:	4813      	ldr	r0, [pc, #76]	@ (8001278 <MX_TIM4_Init+0x94>)
 800122a:	f003 fcf6 	bl	8004c1a <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001234:	f7ff fccc 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001246:	f004 f8cd 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001250:	f7ff fcbe 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001262:	f004 fdbb 	bl	8005ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800126c:	f7ff fcb0 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200003e4 	.word	0x200003e4
 800127c:	40000800 	.word	0x40000800

08001280 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a0:	d128      	bne.n	80012f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_TIM_Encoder_MspInit+0x7c>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <HAL_TIM_Encoder_MspInit+0x7c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_TIM_Encoder_MspInit+0x7c>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_TIM_Encoder_MspInit+0x7c>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_TIM_Encoder_MspInit+0x7c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_TIM_Encoder_MspInit+0x7c>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d2:	2303      	movs	r3, #3
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f0:	f001 fa68 	bl	80027c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a16      	ldr	r2, [pc, #88]	@ (8001368 <HAL_TIM_Base_MspInit+0x68>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <HAL_TIM_Base_MspInit+0x6c>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a15      	ldr	r2, [pc, #84]	@ (800136c <HAL_TIM_Base_MspInit+0x6c>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <HAL_TIM_Base_MspInit+0x6c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800132a:	e018      	b.n	800135e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <HAL_TIM_Base_MspInit+0x70>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d113      	bne.n	800135e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_TIM_Base_MspInit+0x6c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_TIM_Base_MspInit+0x6c>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6593      	str	r3, [r2, #88]	@ 0x58
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_TIM_Base_MspInit+0x6c>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201e      	movs	r0, #30
 8001354:	f001 fa0c 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001358:	201e      	movs	r0, #30
 800135a:	f001 fa25 	bl	80027a8 <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40000400 	.word	0x40000400
 800136c:	40021000 	.word	0x40021000
 8001370:	40000800 	.word	0x40000800

08001374 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <HAL_TIM_MspPostInit+0x64>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d11c      	bne.n	80013d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_TIM_MspPostInit+0x68>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <HAL_TIM_MspPostInit+0x68>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_TIM_MspPostInit+0x68>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ae:	2340      	movs	r3, #64	@ 0x40
 80013b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013cc:	f001 f9fa 	bl	80027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40000400 	.word	0x40000400
 80013dc:	40021000 	.word	0x40021000

080013e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 80013e6:	4a15      	ldr	r2, [pc, #84]	@ (800143c <MX_USART1_UART_Init+0x5c>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_USART1_UART_Init+0x58>)
 8001424:	f004 fd80 	bl	8005f28 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800142e:	f7ff fbcf 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000430 	.word	0x20000430
 800143c:	40013800 	.word	0x40013800

08001440 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <MX_USART2_UART_Init+0x5c>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001484:	f004 fd50 	bl	8005f28 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f7ff fb9f 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200004b8 	.word	0x200004b8
 800149c:	40004400 	.word	0x40004400

080014a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0ae      	sub	sp, #184	@ 0xb8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2288      	movs	r2, #136	@ 0x88
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 f913 	bl	80076ec <memset>
  if(uartHandle->Instance==USART1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a43      	ldr	r2, [pc, #268]	@ (80015d8 <HAL_UART_MspInit+0x138>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d13d      	bne.n	800154c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014d4:	2300      	movs	r3, #0
 80014d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fe3d 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e8:	f7ff fb72 	bl	8000bd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ec:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f0:	4a3a      	ldr	r2, [pc, #232]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f8:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	4a34      	ldr	r2, [pc, #208]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800151c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001536:	2307      	movs	r3, #7
 8001538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001546:	f001 f93d 	bl	80027c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800154a:	e040      	b.n	80015ce <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <HAL_UART_MspInit+0x140>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d13b      	bne.n	80015ce <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155a:	2300      	movs	r3, #0
 800155c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fdfa 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800156e:	f7ff fb2f 	bl	8000bd0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	6593      	str	r3, [r2, #88]	@ 0x58
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_UART_MspInit+0x13c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a2:	230c      	movs	r3, #12
 80015a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f001 f8fb 	bl	80027c4 <HAL_GPIO_Init>
}
 80015ce:	bf00      	nop
 80015d0:	37b8      	adds	r7, #184	@ 0xb8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40004400 	.word	0x40004400

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800161c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff fd1e 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	@ (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f006 f8bf 	bl	8007794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7ff fa19 	bl	8000a4c <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800161c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8001628:	08008e4c 	.word	0x08008e4c
  ldr r2, =_sbss
 800162c:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8001630:	20000aa4 	.word	0x20000aa4

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_Init+0x3c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_Init+0x3c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f001 f883 	bl	800275a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001654:	200f      	movs	r0, #15
 8001656:	f7ff fb85 	bl	8000d64 <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	e001      	b.n	800166a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001666:	f7ff fb59 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800166a:	79fb      	ldrb	r3, [r7, #7]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	20000540 	.word	0x20000540

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000540 	.word	0x20000540

080016b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3360      	adds	r3, #96	@ 0x60
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <LL_ADC_SetOffset+0x44>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	4313      	orrs	r3, r2
 8001750:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03fff000 	.word	0x03fff000

08001768 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3360      	adds	r3, #96	@ 0x60
 8001776:	461a      	mov	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3360      	adds	r3, #96	@ 0x60
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3330      	adds	r3, #48	@ 0x30
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	4413      	add	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	211f      	movs	r1, #31
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	401a      	ands	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 011f 	and.w	r1, r3, #31
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3314      	adds	r3, #20
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0e5b      	lsrs	r3, r3, #25
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	0d1b      	lsrs	r3, r3, #20
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2107      	movs	r1, #7
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	0d1b      	lsrs	r3, r3, #20
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0318 	and.w	r3, r3, #24
 800189a:	4908      	ldr	r1, [pc, #32]	@ (80018bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800189c:	40d9      	lsrs	r1, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	400b      	ands	r3, r1
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	431a      	orrs	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	0007ffff 	.word	0x0007ffff

080018c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6093      	str	r3, [r2, #8]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018f8:	d101      	bne.n	80018fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800191c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001920:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001948:	d101      	bne.n	800194e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <LL_ADC_IsEnabled+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_ADC_IsEnabled+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b04      	cmp	r3, #4
 8001994:	d101      	bne.n	800199a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d101      	bne.n	80019c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e130      	b.n	8001c4c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe fe27 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff67 	bl	80018e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff4d 	bl	80018c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff82 	bl	8001934 <LL_ADC_IsInternalRegulatorEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff66 	bl	800190c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a40:	4b84      	ldr	r3, [pc, #528]	@ (8001c54 <HAL_ADC_Init+0x284>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	4a84      	ldr	r2, [pc, #528]	@ (8001c58 <HAL_ADC_Init+0x288>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff64 	bl	8001934 <LL_ADC_IsInternalRegulatorEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10d      	bne.n	8001a8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff75 	bl	8001982 <LL_ADC_REG_IsConversionOngoing>
 8001a98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 80c9 	bne.w	8001c3a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 80c5 	bne.w	8001c3a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ab8:	f043 0202 	orr.w	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff49 	bl	800195c <LL_ADC_IsEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d115      	bne.n	8001afc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ad0:	4862      	ldr	r0, [pc, #392]	@ (8001c5c <HAL_ADC_Init+0x28c>)
 8001ad2:	f7ff ff43 	bl	800195c <LL_ADC_IsEnabled>
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	4861      	ldr	r0, [pc, #388]	@ (8001c60 <HAL_ADC_Init+0x290>)
 8001ada:	f7ff ff3f 	bl	800195c <LL_ADC_IsEnabled>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	431c      	orrs	r4, r3
 8001ae2:	4860      	ldr	r0, [pc, #384]	@ (8001c64 <HAL_ADC_Init+0x294>)
 8001ae4:	f7ff ff3a 	bl	800195c <LL_ADC_IsEnabled>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4323      	orrs	r3, r4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4619      	mov	r1, r3
 8001af6:	485c      	ldr	r0, [pc, #368]	@ (8001c68 <HAL_ADC_Init+0x298>)
 8001af8:	f7ff fdde 	bl	80016b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e5b      	ldrb	r3, [r3, #25]
 8001b00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d106      	bne.n	8001b38 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	045b      	lsls	r3, r3, #17
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	4b44      	ldr	r3, [pc, #272]	@ (8001c6c <HAL_ADC_Init+0x29c>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff1b 	bl	80019a8 <LL_ADC_INJ_IsConversionOngoing>
 8001b72:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d13d      	bne.n	8001bf6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d13a      	bne.n	8001bf6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b84:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b8c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b9c:	f023 0302 	bic.w	r3, r3, #2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d118      	bne.n	8001be6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10c      	bne.n	8001c18 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	f023 010f 	bic.w	r1, r3, #15
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	1e5a      	subs	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c16:	e007      	b.n	8001c28 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020f 	bic.w	r2, r2, #15
 8001c26:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	f023 0303 	bic.w	r3, r3, #3
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c38:	e007      	b.n	8001c4a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3724      	adds	r7, #36	@ 0x24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	20000000 	.word	0x20000000
 8001c58:	053e2d63 	.word	0x053e2d63
 8001c5c:	50040000 	.word	0x50040000
 8001c60:	50040100 	.word	0x50040100
 8001c64:	50040200 	.word	0x50040200
 8001c68:	50040300 	.word	0x50040300
 8001c6c:	fff0c007 	.word	0xfff0c007

08001c70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0b6      	sub	sp, #216	@ 0xd8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x22>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e3c9      	b.n	8002426 <HAL_ADC_ConfigChannel+0x7b6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fe6f 	bl	8001982 <LL_ADC_REG_IsConversionOngoing>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 83aa 	bne.w	8002400 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d824      	bhi.n	8001d06 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	3b02      	subs	r3, #2
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d81b      	bhi.n	8001cfe <HAL_ADC_ConfigChannel+0x8e>
 8001cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ccc <HAL_ADC_ConfigChannel+0x5c>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001ce5 	.word	0x08001ce5
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001cf5 	.word	0x08001cf5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ce2:	e010      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ce4:	2312      	movs	r3, #18
 8001ce6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cea:	e00c      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001cec:	2318      	movs	r3, #24
 8001cee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cf2:	e008      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cfc:	e003      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d04:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d14:	f7ff fd59 	bl	80017ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fe30 	bl	8001982 <LL_ADC_REG_IsConversionOngoing>
 8001d22:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fe3c 	bl	80019a8 <LL_ADC_INJ_IsConversionOngoing>
 8001d30:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f040 81a4 	bne.w	8002086 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 819f 	bne.w	8002086 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fd64 	bl	8001822 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00a      	beq.n	8001d92 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d8c:	f7ff fcc8 	bl	8001720 <LL_ADC_SetOffset>
 8001d90:	e179      	b.n	8002086 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fce5 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x14e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fcda 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	e01e      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x18c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fccf 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001de0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e004      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1a4>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	e018      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x1d6>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e004      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d106      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fc9e 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc82 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x214>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fc77 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	e01e      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x252>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fc6c 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e004      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x26a>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0e9b      	lsrs	r3, r3, #26
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	e018      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x29c>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ef2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001efe:	2320      	movs	r3, #32
 8001f00:	e004      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fc3b 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2102      	movs	r1, #2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fc1f 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x2da>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc14 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	e01e      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x318>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc09 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e004      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x330>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	e014      	b.n	8001fca <HAL_ADC_ConfigChannel+0x35a>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	e004      	b.n	8001fca <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d106      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fbdc 	bl	8001794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2103      	movs	r1, #3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fbc0 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x398>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fbb5 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 021f 	and.w	r2, r3, #31
 8002006:	e017      	b.n	8002038 <HAL_ADC_ConfigChannel+0x3c8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2103      	movs	r1, #3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fbaa 	bl	8001768 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002022:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002024:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800202e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x3e0>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	e011      	b.n	8002074 <HAL_ADC_ConfigChannel+0x404>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800205e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002060:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002062:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800206c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	2103      	movs	r1, #3
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fb87 	bl	8001794 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fc66 	bl	800195c <LL_ADC_IsEnabled>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8140 	bne.w	8002318 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f7ff fbe7 	bl	8001878 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a8f      	ldr	r2, [pc, #572]	@ (80022ec <HAL_ADC_ConfigChannel+0x67c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	f040 8131 	bne.w	8002318 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <HAL_ADC_ConfigChannel+0x46e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e9b      	lsrs	r3, r3, #26
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2b09      	cmp	r3, #9
 80020d4:	bf94      	ite	ls
 80020d6:	2301      	movls	r3, #1
 80020d8:	2300      	movhi	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	e019      	b.n	8002112 <HAL_ADC_ConfigChannel+0x4a2>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80020ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80020f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e003      	b.n	8002102 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80020fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2b09      	cmp	r3, #9
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002112:	2b00      	cmp	r3, #0
 8002114:	d079      	beq.n	800220a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x4c2>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	3301      	adds	r3, #1
 800212a:	069b      	lsls	r3, r3, #26
 800212c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002130:	e015      	b.n	800215e <HAL_ADC_ConfigChannel+0x4ee>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002142:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800214a:	2320      	movs	r3, #32
 800214c:	e003      	b.n	8002156 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800214e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3301      	adds	r3, #1
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_ADC_ConfigChannel+0x50e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	e017      	b.n	80021ae <HAL_ADC_ConfigChannel+0x53e>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800218c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e003      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800219a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	ea42 0103 	orr.w	r1, r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x564>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	051b      	lsls	r3, r3, #20
 80021d2:	e018      	b.n	8002206 <HAL_ADC_ConfigChannel+0x596>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80021e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80021f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002206:	430b      	orrs	r3, r1
 8002208:	e081      	b.n	800230e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x5b6>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	069b      	lsls	r3, r3, #26
 8002220:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002224:	e015      	b.n	8002252 <HAL_ADC_ConfigChannel+0x5e2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800223e:	2320      	movs	r3, #32
 8002240:	e003      	b.n	800224a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3301      	adds	r3, #1
 800224c:	069b      	lsls	r3, r3, #26
 800224e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x602>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	e017      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x632>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	61bb      	str	r3, [r7, #24]
  return result;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	ea42 0103 	orr.w	r1, r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x65e>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	3301      	adds	r3, #1
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	3b1e      	subs	r3, #30
 80022c6:	051b      	lsls	r3, r3, #20
 80022c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022cc:	e01e      	b.n	800230c <HAL_ADC_ConfigChannel+0x69c>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	60fb      	str	r3, [r7, #12]
  return result;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d104      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e006      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x688>
 80022ea:	bf00      	nop
 80022ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	f003 021f 	and.w	r2, r3, #31
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	3b1e      	subs	r3, #30
 8002306:	051b      	lsls	r3, r3, #20
 8002308:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002312:	4619      	mov	r1, r3
 8002314:	f7ff fa85 	bl	8001822 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b44      	ldr	r3, [pc, #272]	@ (8002430 <HAL_ADC_ConfigChannel+0x7c0>)
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d07a      	beq.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002324:	4843      	ldr	r0, [pc, #268]	@ (8002434 <HAL_ADC_ConfigChannel+0x7c4>)
 8002326:	f7ff f9ed 	bl	8001704 <LL_ADC_GetCommonPathInternalCh>
 800232a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a41      	ldr	r2, [pc, #260]	@ (8002438 <HAL_ADC_ConfigChannel+0x7c8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d12c      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d126      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a3c      	ldr	r2, [pc, #240]	@ (800243c <HAL_ADC_ConfigChannel+0x7cc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_ADC_ConfigChannel+0x6e8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3b      	ldr	r2, [pc, #236]	@ (8002440 <HAL_ADC_ConfigChannel+0x7d0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d15d      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800235c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002360:	4619      	mov	r1, r3
 8002362:	4834      	ldr	r0, [pc, #208]	@ (8002434 <HAL_ADC_ConfigChannel+0x7c4>)
 8002364:	f7ff f9bb 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_ADC_ConfigChannel+0x7d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_ADC_ConfigChannel+0x7d8>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002382:	e002      	b.n	800238a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3b01      	subs	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002390:	e040      	b.n	8002414 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_ADC_ConfigChannel+0x7dc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d118      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800239c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d112      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a23      	ldr	r2, [pc, #140]	@ (800243c <HAL_ADC_ConfigChannel+0x7cc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_ADC_ConfigChannel+0x74c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <HAL_ADC_ConfigChannel+0x7d0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d12d      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c4:	4619      	mov	r1, r3
 80023c6:	481b      	ldr	r0, [pc, #108]	@ (8002434 <HAL_ADC_ConfigChannel+0x7c4>)
 80023c8:	f7ff f989 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023cc:	e024      	b.n	8002418 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002450 <HAL_ADC_ConfigChannel+0x7e0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d120      	bne.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d11a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a14      	ldr	r2, [pc, #80]	@ (800243c <HAL_ADC_ConfigChannel+0x7cc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d115      	bne.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023f6:	4619      	mov	r1, r3
 80023f8:	480e      	ldr	r0, [pc, #56]	@ (8002434 <HAL_ADC_ConfigChannel+0x7c4>)
 80023fa:	f7ff f970 	bl	80016de <LL_ADC_SetCommonPathInternalCh>
 80023fe:	e00c      	b.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002412:	e002      	b.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002418:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002422:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002426:	4618      	mov	r0, r3
 8002428:	37d8      	adds	r7, #216	@ 0xd8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	80080000 	.word	0x80080000
 8002434:	50040300 	.word	0x50040300
 8002438:	c7520000 	.word	0xc7520000
 800243c:	50040000 	.word	0x50040000
 8002440:	50040200 	.word	0x50040200
 8002444:	20000000 	.word	0x20000000
 8002448:	053e2d63 	.word	0x053e2d63
 800244c:	cb840000 	.word	0xcb840000
 8002450:	80000001 	.word	0x80000001

08002454 <LL_ADC_IsEnabled>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <LL_ADC_IsEnabled+0x18>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_ADC_IsEnabled+0x1a>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_REG_IsConversionOngoing>:
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d101      	bne.n	8002492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b09f      	sub	sp, #124	@ 0x7c
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e093      	b.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024c6:	2300      	movs	r3, #0
 80024c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024ca:	2300      	movs	r3, #0
 80024cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a47      	ldr	r2, [pc, #284]	@ (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d102      	bne.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024d8:	4b46      	ldr	r3, [pc, #280]	@ (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	e001      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e072      	b.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffb9 	bl	800247a <LL_ADC_REG_IsConversionOngoing>
 8002508:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ffb3 	bl	800247a <LL_ADC_REG_IsConversionOngoing>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d154      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800251a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800251c:	2b00      	cmp	r3, #0
 800251e:	d151      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002520:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002522:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02c      	beq.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800252c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800253e:	035b      	lsls	r3, r3, #13
 8002540:	430b      	orrs	r3, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002546:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002548:	4829      	ldr	r0, [pc, #164]	@ (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800254a:	f7ff ff83 	bl	8002454 <LL_ADC_IsEnabled>
 800254e:	4604      	mov	r4, r0
 8002550:	4828      	ldr	r0, [pc, #160]	@ (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002552:	f7ff ff7f 	bl	8002454 <LL_ADC_IsEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	431c      	orrs	r4, r3
 800255a:	4828      	ldr	r0, [pc, #160]	@ (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800255c:	f7ff ff7a 	bl	8002454 <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	4323      	orrs	r3, r4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d137      	bne.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002570:	f023 030f 	bic.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6811      	ldr	r1, [r2, #0]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	430a      	orrs	r2, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002582:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002584:	e028      	b.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800258e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002590:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002592:	4817      	ldr	r0, [pc, #92]	@ (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002594:	f7ff ff5e 	bl	8002454 <LL_ADC_IsEnabled>
 8002598:	4604      	mov	r4, r0
 800259a:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800259c:	f7ff ff5a 	bl	8002454 <LL_ADC_IsEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	431c      	orrs	r4, r3
 80025a4:	4815      	ldr	r0, [pc, #84]	@ (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025a6:	f7ff ff55 	bl	8002454 <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4323      	orrs	r3, r4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d112      	bne.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025ba:	f023 030f 	bic.w	r3, r3, #15
 80025be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025c2:	e009      	b.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80025d6:	e000      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	377c      	adds	r7, #124	@ 0x7c
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	50040000 	.word	0x50040000
 80025f4:	50040100 	.word	0x50040100
 80025f8:	50040300 	.word	0x50040300
 80025fc:	50040200 	.word	0x50040200

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	@ (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	@ (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	@ (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	@ 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff4c 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002782:	f7ff ff61 	bl	8002648 <__NVIC_GetPriorityGrouping>
 8002786:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6978      	ldr	r0, [r7, #20]
 800278e:	f7ff ffb1 	bl	80026f4 <NVIC_EncodePriority>
 8002792:	4602      	mov	r2, r0
 8002794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff80 	bl	80026a0 <__NVIC_SetPriority>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff54 	bl	8002664 <__NVIC_EnableIRQ>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	e17f      	b.n	8002ad4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8171 	beq.w	8002ace <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d005      	beq.n	8002804 <HAL_GPIO_Init+0x40>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d130      	bne.n	8002866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283a:	2201      	movs	r2, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 0201 	and.w	r2, r3, #1
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b03      	cmp	r3, #3
 8002870:	d118      	bne.n	80028a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	6939      	ldr	r1, [r7, #16]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80ac 	beq.w	8002ace <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	4b5f      	ldr	r3, [pc, #380]	@ (8002af4 <HAL_GPIO_Init+0x330>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	4a5e      	ldr	r2, [pc, #376]	@ (8002af4 <HAL_GPIO_Init+0x330>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6613      	str	r3, [r2, #96]	@ 0x60
 8002982:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <HAL_GPIO_Init+0x330>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800298e:	4a5a      	ldr	r2, [pc, #360]	@ (8002af8 <HAL_GPIO_Init+0x334>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x242>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	@ (8002afc <HAL_GPIO_Init+0x338>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x23e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b00 <HAL_GPIO_Init+0x33c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x23a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b04 <HAL_GPIO_Init+0x340>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x236>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b08 <HAL_GPIO_Init+0x344>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x232>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	@ (8002b0c <HAL_GPIO_Init+0x348>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x22e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002b10 <HAL_GPIO_Init+0x34c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x22a>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e00c      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e00a      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 80029f2:	2305      	movs	r3, #5
 80029f4:	e008      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e004      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_GPIO_Init+0x244>
 8002a06:	2300      	movs	r3, #0
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	f002 0203 	and.w	r2, r2, #3
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	4093      	lsls	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a18:	4937      	ldr	r1, [pc, #220]	@ (8002af8 <HAL_GPIO_Init+0x334>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a4a:	4a32      	ldr	r2, [pc, #200]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a74:	4a27      	ldr	r2, [pc, #156]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a7a:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac8:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <HAL_GPIO_Init+0x350>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f ae78 	bne.w	80027d4 <HAL_GPIO_Init+0x10>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010000 	.word	0x40010000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	48000800 	.word	0x48000800
 8002b04:	48000c00 	.word	0x48000c00
 8002b08:	48001000 	.word	0x48001000
 8002b0c:	48001400 	.word	0x48001400
 8002b10:	48001800 	.word	0x48001800
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08d      	b.n	8002ca6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd fec6 	bl	8000930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	@ 0x24
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	e006      	b.n	8002c00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d108      	bne.n	8002c1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e007      	b.n	8002c2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	f040 80fd 	bne.w	8002ecc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2C_Master_Transmit+0x30>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0f6      	b.n	8002ece <HAL_I2C_Master_Transmit+0x21e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fcda 	bl	80016a0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2319      	movs	r3, #25
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f914 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0e1      	b.n	8002ece <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2221      	movs	r2, #33	@ 0x21
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2210      	movs	r2, #16
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2bff      	cmp	r3, #255	@ 0xff
 8002d3a:	d906      	bls.n	8002d4a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	22ff      	movs	r2, #255	@ 0xff
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e007      	b.n	8002d5a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d024      	beq.n	8002dac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	8979      	ldrh	r1, [r7, #10]
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed8 <HAL_I2C_Master_Transmit+0x228>)
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa79 	bl	800329c <I2C_TransferConfig>
 8002daa:	e066      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	8979      	ldrh	r1, [r7, #10]
 8002db4:	4b48      	ldr	r3, [pc, #288]	@ (8002ed8 <HAL_I2C_Master_Transmit+0x228>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fa6e 	bl	800329c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002dc0:	e05b      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	6a39      	ldr	r1, [r7, #32]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f8fd 	bl	8002fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e07b      	b.n	8002ece <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d034      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0x1ca>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d130      	bne.n	8002e7a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f880 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e04d      	b.n	8002ece <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2bff      	cmp	r3, #255	@ 0xff
 8002e3a:	d90e      	bls.n	8002e5a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	22ff      	movs	r2, #255	@ 0xff
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	8979      	ldrh	r1, [r7, #10]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fa22 	bl	800329c <I2C_TransferConfig>
 8002e58:	e00f      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa11 	bl	800329c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d19e      	bne.n	8002dc2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	6a39      	ldr	r1, [r7, #32]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f8e3 	bl	8003054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e01a      	b.n	8002ece <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <HAL_I2C_Master_Transmit+0x22c>)
 8002eac:	400b      	ands	r3, r1
 8002eae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	80002000 	.word	0x80002000
 8002edc:	fe00e800 	.word	0xfe00e800

08002ee0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d103      	bne.n	8002efe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d007      	beq.n	8002f1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	619a      	str	r2, [r3, #24]
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f38:	e031      	b.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d02d      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fe fbad 	bl	80016a0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d122      	bne.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d113      	bne.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00f      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0be      	beq.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fd2:	e033      	b.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f87f 	bl	80030dc <I2C_IsErrorOccurred>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e031      	b.n	800304c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d025      	beq.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fe fb56 	bl	80016a0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11a      	bne.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	d013      	beq.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b02      	cmp	r3, #2
 8003048:	d1c4      	bne.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	e02f      	b.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f838 	bl	80030dc <I2C_IsErrorOccurred>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e02d      	b.n	80030d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fb13 	bl	80016a0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11a      	bne.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b20      	cmp	r3, #32
 8003098:	d013      	beq.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e007      	b.n	80030d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d1c8      	bne.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	d068      	beq.n	80031da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2210      	movs	r2, #16
 800310e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003110:	e049      	b.n	80031a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d045      	beq.n	80031a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe fac1 	bl	80016a0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_IsErrorOccurred+0x54>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d13a      	bne.n	80031a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003142:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800314e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003152:	d121      	bne.n	8003198 <I2C_IsErrorOccurred+0xbc>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315a:	d01d      	beq.n	8003198 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b20      	cmp	r3, #32
 8003160:	d01a      	beq.n	8003198 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003170:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003172:	f7fe fa95 	bl	80016a0 <HAL_GetTick>
 8003176:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003178:	e00e      	b.n	8003198 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800317a:	f7fe fa91 	bl	80016a0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b19      	cmp	r3, #25
 8003186:	d907      	bls.n	8003198 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003196:	e006      	b.n	80031a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d1e9      	bne.n	800317a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d003      	beq.n	80031bc <I2C_IsErrorOccurred+0xe0>
 80031b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0aa      	beq.n	8003112 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800321e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff fe45 	bl	8002ee0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <I2C_IsErrorOccurred+0x1bc>)
 8003262:	400b      	ands	r3, r1
 8003264:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800328a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800328e:	4618      	mov	r0, r3
 8003290:	3728      	adds	r7, #40	@ 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	fe00e800 	.word	0xfe00e800

0800329c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	817b      	strh	r3, [r7, #10]
 80032aa:	4613      	mov	r3, r2
 80032ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032b4:	7a7b      	ldrb	r3, [r7, #9]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	0d5b      	lsrs	r3, r3, #21
 80032d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <I2C_TransferConfig+0x60>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	43db      	mvns	r3, r3
 80032e0:	ea02 0103 	and.w	r1, r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	03ff63ff 	.word	0x03ff63ff

08003300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	d138      	bne.n	8003388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003320:	2302      	movs	r3, #2
 8003322:	e032      	b.n	800338a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d139      	bne.n	8003420 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e033      	b.n	8003422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2224      	movs	r2, #36	@ 0x24
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <HAL_PWREx_GetVoltageRange+0x18>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800345a:	d130      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800345c:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003468:	d038      	beq.n	80034dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800346a:	4b20      	ldr	r3, [pc, #128]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003472:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003474:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800347a:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2232      	movs	r2, #50	@ 0x32
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	4a1b      	ldr	r2, [pc, #108]	@ (80034f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0c9b      	lsrs	r3, r3, #18
 800348c:	3301      	adds	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003490:	e002      	b.n	8003498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3b01      	subs	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003498:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	d102      	bne.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f2      	bne.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b8:	d110      	bne.n	80034dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e00f      	b.n	80034de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d007      	beq.n	80034dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034cc:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034d4:	4a05      	ldr	r2, [pc, #20]	@ (80034ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40007000 	.word	0x40007000
 80034f0:	20000000 	.word	0x20000000
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e3ca      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800350a:	4b97      	ldr	r3, [pc, #604]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003514:	4b94      	ldr	r3, [pc, #592]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80e4 	beq.w	80036f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_RCC_OscConfig+0x4a>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	f040 808b 	bne.w	8003650 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 8087 	bne.w	8003650 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003542:	4b89      	ldr	r3, [pc, #548]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_RCC_OscConfig+0x62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e3a2      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	4b82      	ldr	r3, [pc, #520]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <HAL_RCC_OscConfig+0x7c>
 800356a:	4b7f      	ldr	r3, [pc, #508]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003572:	e005      	b.n	8003580 <HAL_RCC_OscConfig+0x88>
 8003574:	4b7c      	ldr	r3, [pc, #496]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	4293      	cmp	r3, r2
 8003582:	d223      	bcs.n	80035cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fd87 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e383      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003598:	4b73      	ldr	r3, [pc, #460]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a72      	ldr	r2, [pc, #456]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800359e:	f043 0308 	orr.w	r3, r3, #8
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b70      	ldr	r3, [pc, #448]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	496d      	ldr	r1, [pc, #436]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	4968      	ldr	r1, [pc, #416]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
 80035ca:	e025      	b.n	8003618 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035cc:	4b66      	ldr	r3, [pc, #408]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a65      	ldr	r2, [pc, #404]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035d2:	f043 0308 	orr.w	r3, r3, #8
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b63      	ldr	r3, [pc, #396]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4960      	ldr	r1, [pc, #384]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	495b      	ldr	r1, [pc, #364]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fd47 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e343      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003618:	f000 fc4a 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b52      	ldr	r3, [pc, #328]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	4950      	ldr	r1, [pc, #320]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
 8003634:	4a4e      	ldr	r2, [pc, #312]	@ (8003770 <HAL_RCC_OscConfig+0x278>)
 8003636:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003638:	4b4e      	ldr	r3, [pc, #312]	@ (8003774 <HAL_RCC_OscConfig+0x27c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd fb91 	bl	8000d64 <HAL_InitTick>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d052      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	e327      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d032      	beq.n	80036be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003658:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a42      	ldr	r2, [pc, #264]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003664:	f7fe f81c 	bl	80016a0 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800366c:	f7fe f818 	bl	80016a0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e310      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800367e:	4b3a      	ldr	r3, [pc, #232]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800368a:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a36      	ldr	r2, [pc, #216]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b34      	ldr	r3, [pc, #208]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4931      	ldr	r1, [pc, #196]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	492c      	ldr	r1, [pc, #176]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
 80036bc:	e01a      	b.n	80036f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036be:	4b2a      	ldr	r3, [pc, #168]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a29      	ldr	r2, [pc, #164]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ca:	f7fd ffe9 	bl	80016a0 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d2:	f7fd ffe5 	bl	80016a0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e2dd      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036e4:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x1da>
 80036f0:	e000      	b.n	80036f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d074      	beq.n	80037ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d005      	beq.n	8003712 <HAL_RCC_OscConfig+0x21a>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b0c      	cmp	r3, #12
 800370a:	d10e      	bne.n	800372a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d064      	beq.n	80037e8 <HAL_RCC_OscConfig+0x2f0>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d160      	bne.n	80037e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e2ba      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x24a>
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0b      	ldr	r2, [pc, #44]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e026      	b.n	8003790 <HAL_RCC_OscConfig+0x298>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800374a:	d115      	bne.n	8003778 <HAL_RCC_OscConfig+0x280>
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a05      	ldr	r2, [pc, #20]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 8003752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b03      	ldr	r3, [pc, #12]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a02      	ldr	r2, [pc, #8]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800375e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x298>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	08008630 	.word	0x08008630
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004
 8003778:	4ba0      	ldr	r3, [pc, #640]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a9f      	ldr	r2, [pc, #636]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b9d      	ldr	r3, [pc, #628]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a9c      	ldr	r2, [pc, #624]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd ff82 	bl	80016a0 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fd ff7e 	bl	80016a0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e276      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b2:	4b92      	ldr	r3, [pc, #584]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x2a8>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd ff6e 	bl	80016a0 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fd ff6a 	bl	80016a0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	@ 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e262      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037da:	4b88      	ldr	r3, [pc, #544]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2d0>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d060      	beq.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_OscConfig+0x310>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d119      	bne.n	8003836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d116      	bne.n	8003836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003808:	4b7c      	ldr	r3, [pc, #496]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x328>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e23f      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b76      	ldr	r3, [pc, #472]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4973      	ldr	r1, [pc, #460]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003834:	e040      	b.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d023      	beq.n	8003886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383e:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fd ff29 	bl	80016a0 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003852:	f7fd ff25 	bl	80016a0 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e21d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003864:	4b65      	ldr	r3, [pc, #404]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b62      	ldr	r3, [pc, #392]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	495f      	ldr	r1, [pc, #380]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	e018      	b.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b5d      	ldr	r3, [pc, #372]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5c      	ldr	r2, [pc, #368]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800388c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fd ff05 	bl	80016a0 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7fd ff01 	bl	80016a0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1f9      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03c      	beq.n	800393e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01c      	beq.n	8003906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d2:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd fee0 	bl	80016a0 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fd fedc 	bl	80016a0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1d4      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f6:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80038f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ef      	beq.n	80038e4 <HAL_RCC_OscConfig+0x3ec>
 8003904:	e01b      	b.n	800393e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003906:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390c:	4a3b      	ldr	r2, [pc, #236]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fd fec3 	bl	80016a0 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391e:	f7fd febf 	bl	80016a0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e1b7      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003930:	4b32      	ldr	r3, [pc, #200]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ef      	bne.n	800391e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80a6 	beq.w	8003a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394c:	2300      	movs	r3, #0
 800394e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	4a26      	ldr	r2, [pc, #152]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	@ 0x58
 8003968:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003974:	2301      	movs	r3, #1
 8003976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003978:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <HAL_RCC_OscConfig+0x508>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d118      	bne.n	80039b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003984:	4b1e      	ldr	r3, [pc, #120]	@ (8003a00 <HAL_RCC_OscConfig+0x508>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <HAL_RCC_OscConfig+0x508>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003990:	f7fd fe86 	bl	80016a0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003998:	f7fd fe82 	bl	80016a0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e17a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCC_OscConfig+0x508>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d108      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4d8>
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c4:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ce:	e029      	b.n	8003a24 <HAL_RCC_OscConfig+0x52c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d115      	bne.n	8003a04 <HAL_RCC_OscConfig+0x50c>
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	4a03      	ldr	r2, [pc, #12]	@ (80039fc <HAL_RCC_OscConfig+0x504>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f8:	e014      	b.n	8003a24 <HAL_RCC_OscConfig+0x52c>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
 8003a04:	4b9c      	ldr	r3, [pc, #624]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0a:	4a9b      	ldr	r2, [pc, #620]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a14:	4b98      	ldr	r3, [pc, #608]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1a:	4a97      	ldr	r2, [pc, #604]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d016      	beq.n	8003a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fe38 	bl	80016a0 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fd fe34 	bl	80016a0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e12a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ed      	beq.n	8003a34 <HAL_RCC_OscConfig+0x53c>
 8003a58:	e015      	b.n	8003a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fe21 	bl	80016a0 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fe1d 	bl	80016a0 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e113      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a78:	4b7f      	ldr	r3, [pc, #508]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ed      	bne.n	8003a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a90:	4a79      	ldr	r2, [pc, #484]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80fe 	beq.w	8003c9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	f040 80d0 	bne.w	8003c4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003aac:	4b72      	ldr	r3, [pc, #456]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0203 	and.w	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d130      	bne.n	8003b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	3b01      	subs	r3, #1
 8003acc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d127      	bne.n	8003b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d11f      	bne.n	8003b22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003aec:	2a07      	cmp	r2, #7
 8003aee:	bf14      	ite	ne
 8003af0:	2201      	movne	r2, #1
 8003af2:	2200      	moveq	r2, #0
 8003af4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d113      	bne.n	8003b22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d06e      	beq.n	8003c00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d069      	beq.n	8003bfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b28:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b34:	4b50      	ldr	r3, [pc, #320]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0ad      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b44:	4b4c      	ldr	r3, [pc, #304]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a4b      	ldr	r2, [pc, #300]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b50:	f7fd fda6 	bl	80016a0 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fd fda2 	bl	80016a0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e09a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b6a:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b76:	4b40      	ldr	r3, [pc, #256]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	4b40      	ldr	r3, [pc, #256]	@ (8003c7c <HAL_RCC_OscConfig+0x784>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b86:	3a01      	subs	r2, #1
 8003b88:	0112      	lsls	r2, r2, #4
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b90:	0212      	lsls	r2, r2, #8
 8003b92:	4311      	orrs	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b98:	0852      	lsrs	r2, r2, #1
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0552      	lsls	r2, r2, #21
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ba4:	0852      	lsrs	r2, r2, #1
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	0652      	lsls	r2, r2, #25
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bb0:	0912      	lsrs	r2, r2, #4
 8003bb2:	0452      	lsls	r2, r2, #17
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	4930      	ldr	r1, [pc, #192]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bd4:	f7fd fd64 	bl	80016a0 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fd fd60 	bl	80016a0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e058      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bee:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bfa:	e050      	b.n	8003c9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e04f      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d148      	bne.n	8003c9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a19      	ldr	r2, [pc, #100]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c18:	4b17      	ldr	r3, [pc, #92]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4a16      	ldr	r2, [pc, #88]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c24:	f7fd fd3c 	bl	80016a0 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fd fd38 	bl	80016a0 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e030      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x734>
 8003c4a:	e028      	b.n	8003c9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d023      	beq.n	8003c9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <HAL_RCC_OscConfig+0x780>)
 8003c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fd1f 	bl	80016a0 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c64:	e00c      	b.n	8003c80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fd1b 	bl	80016a0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d905      	bls.n	8003c80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e013      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c80:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_OscConfig+0x7b0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ec      	bne.n	8003c66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_RCC_OscConfig+0x7b0>)
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	4905      	ldr	r1, [pc, #20]	@ (8003ca8 <HAL_RCC_OscConfig+0x7b0>)
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_RCC_OscConfig+0x7b4>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60cb      	str	r3, [r1, #12]
 8003c98:	e001      	b.n	8003c9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	feeefffc 	.word	0xfeeefffc

08003cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0e7      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b75      	ldr	r3, [pc, #468]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d910      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b72      	ldr	r3, [pc, #456]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 0207 	bic.w	r2, r3, #7
 8003cda:	4970      	ldr	r1, [pc, #448]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0cf      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d010      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d908      	bls.n	8003d22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b63      	ldr	r3, [pc, #396]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4960      	ldr	r1, [pc, #384]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d04c      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d36:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0a6      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4e:	4b54      	ldr	r3, [pc, #336]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e09a      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d66:	4b4e      	ldr	r3, [pc, #312]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e08e      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e086      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b46      	ldr	r3, [pc, #280]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4943      	ldr	r1, [pc, #268]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd fc82 	bl	80016a0 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fd fc7e 	bl	80016a0 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e06e      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d208      	bcs.n	8003df6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	492b      	ldr	r1, [pc, #172]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df6:	4b29      	ldr	r3, [pc, #164]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d210      	bcs.n	8003e26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 0207 	bic.w	r2, r3, #7
 8003e0c:	4923      	ldr	r1, [pc, #140]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e14:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <HAL_RCC_ClockConfig+0x1ec>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e036      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4918      	ldr	r1, [pc, #96]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e50:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4910      	ldr	r1, [pc, #64]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e64:	f000 f824 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	490b      	ldr	r1, [pc, #44]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	4a09      	ldr	r2, [pc, #36]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8003e82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e84:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <HAL_RCC_ClockConfig+0x1fc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc ff6b 	bl	8000d64 <HAL_InitTick>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e92:	7afb      	ldrb	r3, [r7, #11]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40022000 	.word	0x40022000
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08008630 	.word	0x08008630
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	@ 0x24
 8003eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d121      	bne.n	8003f22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d11e      	bne.n	8003f22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ee4:	4b34      	ldr	r3, [pc, #208]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ef0:	4b31      	ldr	r3, [pc, #196]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e005      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f00:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d102      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f28:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e004      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f34:	4b23      	ldr	r3, [pc, #140]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d134      	bne.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d003      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0xac>
 8003f54:	e005      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f58:	617b      	str	r3, [r7, #20]
      break;
 8003f5a:	e005      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f5e:	617b      	str	r3, [r7, #20]
      break;
 8003f60:	e002      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	617b      	str	r3, [r7, #20]
      break;
 8003f66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f68:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	3301      	adds	r3, #1
 8003f74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f76:	4b10      	ldr	r3, [pc, #64]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	fb03 f202 	mul.w	r2, r3, r2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	0e5b      	lsrs	r3, r3, #25
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	@ 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	08008648 	.word	0x08008648
 8003fc0:	00f42400 	.word	0x00f42400
 8003fc4:	007a1200 	.word	0x007a1200

08003fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000000 	.word	0x20000000

08003fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fe4:	f7ff fff0 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4904      	ldr	r1, [pc, #16]	@ (8004008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	08008640 	.word	0x08008640

0800400c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004010:	f7ff ffda 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0adb      	lsrs	r3, r3, #11
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4904      	ldr	r1, [pc, #16]	@ (8004034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	08008640 	.word	0x08008640

08004038 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	220f      	movs	r2, #15
 8004046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004048:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <HAL_RCC_GetClockConfig+0x5c>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0203 	and.w	r2, r3, #3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004054:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_RCC_GetClockConfig+0x5c>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <HAL_RCC_GetClockConfig+0x5c>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_GetClockConfig+0x5c>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_RCC_GetClockConfig+0x60>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0207 	and.w	r2, r3, #7
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40022000 	.word	0x40022000

0800409c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040b4:	f7ff f9bc 	bl	8003430 <HAL_PWREx_GetVoltageRange>
 80040b8:	6178      	str	r0, [r7, #20]
 80040ba:	e014      	b.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b25      	ldr	r3, [pc, #148]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c8:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040d4:	f7ff f9ac 	bl	8003430 <HAL_PWREx_GetVoltageRange>
 80040d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d10b      	bne.n	8004106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d919      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80040f8:	d902      	bls.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040fa:	2302      	movs	r3, #2
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e013      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004100:	2301      	movs	r3, #1
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e010      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d902      	bls.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e00a      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d102      	bne.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004118:	2302      	movs	r3, #2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e004      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b70      	cmp	r3, #112	@ 0x70
 8004122:	d101      	bne.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	4909      	ldr	r1, [pc, #36]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004138:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004164:	2300      	movs	r3, #0
 8004166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004168:	2300      	movs	r3, #0
 800416a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d041      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800417c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004180:	d02a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004182:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004186:	d824      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800418e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004192:	d81e      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419c:	d010      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800419e:	e018      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a0:	4b86      	ldr	r3, [pc, #536]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a85      	ldr	r2, [pc, #532]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ac:	e015      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fabb 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041be:	e00c      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3320      	adds	r3, #32
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fba6 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	74fb      	strb	r3, [r7, #19]
      break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e0:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ee:	4973      	ldr	r1, [pc, #460]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d041      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800420c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004210:	d02a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004216:	d824      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800421e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004222:	d81e      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800422c:	d010      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800422e:	e018      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004230:	4b62      	ldr	r3, [pc, #392]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a61      	ldr	r2, [pc, #388]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800423c:	e015      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa73 	bl	8004730 <RCCEx_PLLSAI1_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3320      	adds	r3, #32
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fb5e 	bl	8004918 <RCCEx_PLLSAI2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	74fb      	strb	r3, [r7, #19]
      break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004270:	4b52      	ldr	r3, [pc, #328]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427e:	494f      	ldr	r1, [pc, #316]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a0 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	4a40      	ldr	r2, [pc, #256]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c0:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3a      	ldr	r2, [pc, #232]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042dc:	f7fd f9e0 	bl	80016a0 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e2:	e009      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e4:	f7fd f9dc 	bl	80016a0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	74fb      	strb	r3, [r7, #19]
        break;
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042f8:	4b31      	ldr	r3, [pc, #196]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d15c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430a:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	d019      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004354:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd f99b 	bl	80016a0 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436c:	e00b      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd f997 	bl	80016a0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d902      	bls.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	74fb      	strb	r3, [r7, #19]
            break;
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ec      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439a:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	4904      	ldr	r1, [pc, #16]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c8:	7c7b      	ldrb	r3, [r7, #17]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d105      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	4a9d      	ldr	r2, [pc, #628]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e6:	4b98      	ldr	r3, [pc, #608]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f023 0203 	bic.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	4994      	ldr	r1, [pc, #592]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004408:	4b8f      	ldr	r3, [pc, #572]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f023 020c 	bic.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	498c      	ldr	r1, [pc, #560]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800442a:	4b87      	ldr	r3, [pc, #540]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	4983      	ldr	r1, [pc, #524]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800444c:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	497b      	ldr	r1, [pc, #492]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800446e:	4b76      	ldr	r3, [pc, #472]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447c:	4972      	ldr	r1, [pc, #456]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004490:	4b6d      	ldr	r3, [pc, #436]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	496a      	ldr	r1, [pc, #424]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b65      	ldr	r3, [pc, #404]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	4961      	ldr	r1, [pc, #388]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	4959      	ldr	r1, [pc, #356]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f6:	4b54      	ldr	r3, [pc, #336]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	4950      	ldr	r1, [pc, #320]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004518:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	4948      	ldr	r1, [pc, #288]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004548:	493f      	ldr	r1, [pc, #252]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d028      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800455c:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456a:	4937      	ldr	r1, [pc, #220]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457a:	d106      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b32      	ldr	r3, [pc, #200]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a31      	ldr	r2, [pc, #196]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e011      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f8c8 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d028      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045ba:	4b23      	ldr	r3, [pc, #140]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c8:	491f      	ldr	r1, [pc, #124]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d8:	d106      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a1a      	ldr	r2, [pc, #104]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e4:	60d3      	str	r3, [r2, #12]
 80045e6:	e011      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f0:	d10c      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f899 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02b      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004626:	4908      	ldr	r1, [pc, #32]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004638:	4b03      	ldr	r3, [pc, #12]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004642:	60d3      	str	r3, [r2, #12]
 8004644:	e014      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f867 	bl	8004730 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02f      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467c:	4b2b      	ldr	r3, [pc, #172]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468a:	4928      	ldr	r1, [pc, #160]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469a:	d10d      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f844 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	74bb      	strb	r3, [r7, #18]
 80046b6:	e011      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3320      	adds	r3, #32
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f925 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046e8:	4b10      	ldr	r3, [pc, #64]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f6:	490d      	ldr	r1, [pc, #52]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471a:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004722:	7cbb      	ldrb	r3, [r7, #18]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800473e:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800474a:	4b72      	ldr	r3, [pc, #456]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d10d      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
       ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004762:	4b6c      	ldr	r3, [pc, #432]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
       ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d047      	beq.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e044      	b.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d018      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x86>
 8004784:	2b03      	cmp	r3, #3
 8004786:	d825      	bhi.n	80047d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004788:	2b01      	cmp	r3, #1
 800478a:	d002      	beq.n	8004792 <RCCEx_PLLSAI1_Config+0x62>
 800478c:	2b02      	cmp	r3, #2
 800478e:	d009      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x74>
 8004790:	e020      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004792:	4b60      	ldr	r3, [pc, #384]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11d      	bne.n	80047da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a2:	e01a      	b.n	80047da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d116      	bne.n	80047de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b4:	e013      	b.n	80047de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047b6:	4b57      	ldr	r3, [pc, #348]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047c2:	4b54      	ldr	r3, [pc, #336]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047d2:	e006      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e004      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	430b      	orrs	r3, r1
 8004800:	4944      	ldr	r1, [pc, #272]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d17d      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800480c:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a40      	ldr	r2, [pc, #256]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fc ff42 	bl	80016a0 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fc ff3e 	bl	80016a0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
        break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004834:	4b37      	ldr	r3, [pc, #220]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ef      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d160      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d111      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484c:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
 800485c:	0211      	lsls	r1, r2, #8
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	0912      	lsrs	r2, r2, #4
 8004864:	0452      	lsls	r2, r2, #17
 8004866:	430a      	orrs	r2, r1
 8004868:	492a      	ldr	r1, [pc, #168]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
 800486e:	e027      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d112      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800487e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6892      	ldr	r2, [r2, #8]
 8004886:	0211      	lsls	r1, r2, #8
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6912      	ldr	r2, [r2, #16]
 800488c:	0852      	lsrs	r2, r2, #1
 800488e:	3a01      	subs	r2, #1
 8004890:	0552      	lsls	r2, r2, #21
 8004892:	430a      	orrs	r2, r1
 8004894:	491f      	ldr	r1, [pc, #124]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]
 800489a:	e011      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489c:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6952      	ldr	r2, [r2, #20]
 80048b2:	0852      	lsrs	r2, r2, #1
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0652      	lsls	r2, r2, #25
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4916      	ldr	r1, [pc, #88]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fc fee8 	bl	80016a0 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d4:	f7fc fee4 	bl	80016a0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
          break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	4904      	ldr	r1, [pc, #16]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	4313      	orrs	r3, r2
 8004906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000

08004918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004926:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004932:	4b67      	ldr	r3, [pc, #412]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d10d      	bne.n	800495e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
       ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800494a:	4b61      	ldr	r3, [pc, #388]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
       ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d047      	beq.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e044      	b.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d018      	beq.n	800499e <RCCEx_PLLSAI2_Config+0x86>
 800496c:	2b03      	cmp	r3, #3
 800496e:	d825      	bhi.n	80049bc <RCCEx_PLLSAI2_Config+0xa4>
 8004970:	2b01      	cmp	r3, #1
 8004972:	d002      	beq.n	800497a <RCCEx_PLLSAI2_Config+0x62>
 8004974:	2b02      	cmp	r3, #2
 8004976:	d009      	beq.n	800498c <RCCEx_PLLSAI2_Config+0x74>
 8004978:	e020      	b.n	80049bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497a:	4b55      	ldr	r3, [pc, #340]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11d      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498a:	e01a      	b.n	80049c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800498c:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499c:	e013      	b.n	80049c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800499e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049aa:	4b49      	ldr	r3, [pc, #292]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ba:	e006      	b.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e004      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	430b      	orrs	r3, r1
 80049e8:	4939      	ldr	r1, [pc, #228]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d167      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a35      	ldr	r2, [pc, #212]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc fe4e 	bl	80016a0 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a08:	f7fc fe4a 	bl	80016a0 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1a:	e005      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ef      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d14a      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d111      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a34:	4b26      	ldr	r3, [pc, #152]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6892      	ldr	r2, [r2, #8]
 8004a44:	0211      	lsls	r1, r2, #8
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	0912      	lsrs	r2, r2, #4
 8004a4c:	0452      	lsls	r2, r2, #17
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	491f      	ldr	r1, [pc, #124]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	614b      	str	r3, [r1, #20]
 8004a56:	e011      	b.n	8004a7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6912      	ldr	r2, [r2, #16]
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0652      	lsls	r2, r2, #25
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fc fe0a 	bl	80016a0 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a90:	f7fc fe06 	bl	80016a0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ab6:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e095      	b.n	8004c12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af6:	d009      	beq.n	8004b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	61da      	str	r2, [r3, #28]
 8004afe:	e005      	b.n	8004b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc f896 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b4c:	d902      	bls.n	8004b54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e002      	b.n	8004b5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b62:	d007      	beq.n	8004b74 <HAL_SPI_Init+0xa0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb6:	ea42 0103 	orr.w	r1, r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	f003 0204 	and.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bf0:	ea42 0103 	orr.w	r1, r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e049      	b.n	8004cc0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fc fb5d 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f000 fcb5 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d001      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e04f      	b.n	8004d80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	@ (8004d8c <HAL_TIM_Base_Start_IT+0xc4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x76>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x76>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	@ (8004d90 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x76>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x76>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1c      	ldr	r2, [pc, #112]	@ (8004d98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x76>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x76>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d115      	bne.n	8004d6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d015      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0xb4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d56:	d011      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	e008      	b.n	8004d7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e000      	b.n	8004d7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	40013400 	.word	0x40013400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	00010007 	.word	0x00010007

08004da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e049      	b.n	8004e4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f841 	bl	8004e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fbee 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e097      	b.n	8004fae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc f9f4 	bl	8001280 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f000 fb82 	bl	80055c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eec:	f023 0303 	bic.w	r3, r3, #3
 8004ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	4313      	orrs	r3, r2
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f0a:	f023 030c 	bic.w	r3, r3, #12
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	4313      	orrs	r3, r2
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	011a      	lsls	r2, r3, #4
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	031b      	lsls	r3, r3, #12
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d020      	beq.n	800501a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01b      	beq.n	800501a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f06f 0202 	mvn.w	r2, #2
 8004fea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fac2 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 8005006:	e005      	b.n	8005014 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fab4 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fac5 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01b      	beq.n	8005066 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0204 	mvn.w	r2, #4
 8005036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fa9c 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 8005052:	e005      	b.n	8005060 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fa8e 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa9f 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01b      	beq.n	80050b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0208 	mvn.w	r2, #8
 8005082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2204      	movs	r2, #4
 8005088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fa76 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 800509e:	e005      	b.n	80050ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fa68 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa79 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01b      	beq.n	80050fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0210 	mvn.w	r2, #16
 80050ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2208      	movs	r2, #8
 80050d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fa50 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 80050ea:	e005      	b.n	80050f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa42 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa53 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00c      	beq.n	8005122 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f06f 0201 	mvn.w	r2, #1
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fb fd19 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00c      	beq.n	8005146 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800513e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fedd 	bl	8005f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00c      	beq.n	800516a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fed5 	bl	8005f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fa12 	bl	80055b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0220 	mvn.w	r2, #32
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fe9d 	bl	8005eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e0ff      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b14      	cmp	r3, #20
 80051e6:	f200 80f0 	bhi.w	80053ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080053cb 	.word	0x080053cb
 80051f8:	080053cb 	.word	0x080053cb
 80051fc:	080053cb 	.word	0x080053cb
 8005200:	08005285 	.word	0x08005285
 8005204:	080053cb 	.word	0x080053cb
 8005208:	080053cb 	.word	0x080053cb
 800520c:	080053cb 	.word	0x080053cb
 8005210:	080052c7 	.word	0x080052c7
 8005214:	080053cb 	.word	0x080053cb
 8005218:	080053cb 	.word	0x080053cb
 800521c:	080053cb 	.word	0x080053cb
 8005220:	08005307 	.word	0x08005307
 8005224:	080053cb 	.word	0x080053cb
 8005228:	080053cb 	.word	0x080053cb
 800522c:	080053cb 	.word	0x080053cb
 8005230:	08005349 	.word	0x08005349
 8005234:	080053cb 	.word	0x080053cb
 8005238:	080053cb 	.word	0x080053cb
 800523c:	080053cb 	.word	0x080053cb
 8005240:	08005389 	.word	0x08005389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa56 	bl	80056fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0208 	orr.w	r2, r2, #8
 800525e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0204 	bic.w	r2, r2, #4
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	619a      	str	r2, [r3, #24]
      break;
 8005282:	e0a5      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fac6 	bl	800581c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	021a      	lsls	r2, r3, #8
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	619a      	str	r2, [r3, #24]
      break;
 80052c4:	e084      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fb2f 	bl	8005930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69d9      	ldr	r1, [r3, #28]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	61da      	str	r2, [r3, #28]
      break;
 8005304:	e064      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fb97 	bl	8005a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69d9      	ldr	r1, [r3, #28]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	021a      	lsls	r2, r3, #8
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	61da      	str	r2, [r3, #28]
      break;
 8005346:	e043      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fbe0 	bl	8005b14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005386:	e023      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fc24 	bl	8005bdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053c8:	e002      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
      break;
 80053ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop

080053e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_ConfigClockSource+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0b6      	b.n	800556e <HAL_TIM_ConfigClockSource+0x18a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800541e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800542a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543c:	d03e      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0xd8>
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005442:	f200 8087 	bhi.w	8005554 <HAL_TIM_ConfigClockSource+0x170>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544a:	f000 8086 	beq.w	800555a <HAL_TIM_ConfigClockSource+0x176>
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005452:	d87f      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 8005454:	2b70      	cmp	r3, #112	@ 0x70
 8005456:	d01a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0xaa>
 8005458:	2b70      	cmp	r3, #112	@ 0x70
 800545a:	d87b      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 800545c:	2b60      	cmp	r3, #96	@ 0x60
 800545e:	d050      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x11e>
 8005460:	2b60      	cmp	r3, #96	@ 0x60
 8005462:	d877      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 8005464:	2b50      	cmp	r3, #80	@ 0x50
 8005466:	d03c      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005468:	2b50      	cmp	r3, #80	@ 0x50
 800546a:	d873      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d058      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x13e>
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	d86f      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 8005474:	2b30      	cmp	r3, #48	@ 0x30
 8005476:	d064      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x15e>
 8005478:	2b30      	cmp	r3, #48	@ 0x30
 800547a:	d86b      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d060      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x15e>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d867      	bhi.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05c      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x15e>
 8005488:	2b10      	cmp	r3, #16
 800548a:	d05a      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x15e>
 800548c:	e062      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800549e:	f000 fc7d 	bl	8005d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	609a      	str	r2, [r3, #8]
      break;
 80054ba:	e04f      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054cc:	f000 fc66 	bl	8005d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054de:	609a      	str	r2, [r3, #8]
      break;
 80054e0:	e03c      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ee:	461a      	mov	r2, r3
 80054f0:	f000 fbda 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2150      	movs	r1, #80	@ 0x50
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fc33 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005500:	e02c      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550e:	461a      	mov	r2, r3
 8005510:	f000 fbf9 	bl	8005d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2160      	movs	r1, #96	@ 0x60
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fc23 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005520:	e01c      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fbba 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2140      	movs	r1, #64	@ 0x40
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fc13 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005540:	e00c      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f000 fc0a 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005552:	e003      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      break;
 8005558:	e000      	b.n	800555c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800555a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a40      	ldr	r2, [pc, #256]	@ (80056dc <TIM_Base_SetConfig+0x114>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e6:	d00f      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3d      	ldr	r2, [pc, #244]	@ (80056e0 <TIM_Base_SetConfig+0x118>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3c      	ldr	r2, [pc, #240]	@ (80056e4 <TIM_Base_SetConfig+0x11c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3b      	ldr	r2, [pc, #236]	@ (80056e8 <TIM_Base_SetConfig+0x120>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3a      	ldr	r2, [pc, #232]	@ (80056ec <TIM_Base_SetConfig+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d108      	bne.n	800561a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2f      	ldr	r2, [pc, #188]	@ (80056dc <TIM_Base_SetConfig+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01f      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005628:	d01b      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2c      	ldr	r2, [pc, #176]	@ (80056e0 <TIM_Base_SetConfig+0x118>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d017      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2b      	ldr	r2, [pc, #172]	@ (80056e4 <TIM_Base_SetConfig+0x11c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2a      	ldr	r2, [pc, #168]	@ (80056e8 <TIM_Base_SetConfig+0x120>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00f      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a29      	ldr	r2, [pc, #164]	@ (80056ec <TIM_Base_SetConfig+0x124>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00b      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a28      	ldr	r2, [pc, #160]	@ (80056f0 <TIM_Base_SetConfig+0x128>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d007      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	@ (80056f4 <TIM_Base_SetConfig+0x12c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <TIM_Base_SetConfig+0x130>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d108      	bne.n	8005674 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a10      	ldr	r2, [pc, #64]	@ (80056dc <TIM_Base_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0xf8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a12      	ldr	r2, [pc, #72]	@ (80056ec <TIM_Base_SetConfig+0x124>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a11      	ldr	r2, [pc, #68]	@ (80056f0 <TIM_Base_SetConfig+0x128>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0xf8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a10      	ldr	r2, [pc, #64]	@ (80056f4 <TIM_Base_SetConfig+0x12c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0xf8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a0f      	ldr	r2, [pc, #60]	@ (80056f8 <TIM_Base_SetConfig+0x130>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	615a      	str	r2, [r3, #20]
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40013400 	.word	0x40013400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400
 80056f8:	40014800 	.word	0x40014800

080056fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f023 0201 	bic.w	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0302 	bic.w	r3, r3, #2
 8005748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2c      	ldr	r2, [pc, #176]	@ (8005808 <TIM_OC1_SetConfig+0x10c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_OC1_SetConfig+0x80>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2b      	ldr	r2, [pc, #172]	@ (800580c <TIM_OC1_SetConfig+0x110>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_OC1_SetConfig+0x80>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2a      	ldr	r2, [pc, #168]	@ (8005810 <TIM_OC1_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_OC1_SetConfig+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a29      	ldr	r2, [pc, #164]	@ (8005814 <TIM_OC1_SetConfig+0x118>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC1_SetConfig+0x80>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a28      	ldr	r2, [pc, #160]	@ (8005818 <TIM_OC1_SetConfig+0x11c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1b      	ldr	r2, [pc, #108]	@ (8005808 <TIM_OC1_SetConfig+0x10c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00f      	beq.n	80057be <TIM_OC1_SetConfig+0xc2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	@ (800580c <TIM_OC1_SetConfig+0x110>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00b      	beq.n	80057be <TIM_OC1_SetConfig+0xc2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a19      	ldr	r2, [pc, #100]	@ (8005810 <TIM_OC1_SetConfig+0x114>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <TIM_OC1_SetConfig+0xc2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a18      	ldr	r2, [pc, #96]	@ (8005814 <TIM_OC1_SetConfig+0x118>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC1_SetConfig+0xc2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a17      	ldr	r2, [pc, #92]	@ (8005818 <TIM_OC1_SetConfig+0x11c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d111      	bne.n	80057e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40013400 	.word	0x40013400
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800

0800581c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0210 	bic.w	r2, r3, #16
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800584a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0320 	bic.w	r3, r3, #32
 800586a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a28      	ldr	r2, [pc, #160]	@ (800591c <TIM_OC2_SetConfig+0x100>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC2_SetConfig+0x6c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a27      	ldr	r2, [pc, #156]	@ (8005920 <TIM_OC2_SetConfig+0x104>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10d      	bne.n	80058a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <TIM_OC2_SetConfig+0x100>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00f      	beq.n	80058cc <TIM_OC2_SetConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005920 <TIM_OC2_SetConfig+0x104>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_OC2_SetConfig+0xb0>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005924 <TIM_OC2_SetConfig+0x108>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_OC2_SetConfig+0xb0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1a      	ldr	r2, [pc, #104]	@ (8005928 <TIM_OC2_SetConfig+0x10c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC2_SetConfig+0xb0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a19      	ldr	r2, [pc, #100]	@ (800592c <TIM_OC2_SetConfig+0x110>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d113      	bne.n	80058f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40013400 	.word	0x40013400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800

08005930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800597c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a27      	ldr	r2, [pc, #156]	@ (8005a2c <TIM_OC3_SetConfig+0xfc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_OC3_SetConfig+0x6a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a26      	ldr	r2, [pc, #152]	@ (8005a30 <TIM_OC3_SetConfig+0x100>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10d      	bne.n	80059b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a2c <TIM_OC3_SetConfig+0xfc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_OC3_SetConfig+0xae>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <TIM_OC3_SetConfig+0x100>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_OC3_SetConfig+0xae>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a34 <TIM_OC3_SetConfig+0x104>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_OC3_SetConfig+0xae>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a19      	ldr	r2, [pc, #100]	@ (8005a38 <TIM_OC3_SetConfig+0x108>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC3_SetConfig+0xae>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <TIM_OC3_SetConfig+0x10c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d113      	bne.n	8005a06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	031b      	lsls	r3, r3, #12
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <TIM_OC4_SetConfig+0xc0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x84>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	@ (8005b04 <TIM_OC4_SetConfig+0xc4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x84>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <TIM_OC4_SetConfig+0xc8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x84>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a15      	ldr	r2, [pc, #84]	@ (8005b0c <TIM_OC4_SetConfig+0xcc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x84>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a14      	ldr	r2, [pc, #80]	@ (8005b10 <TIM_OC4_SetConfig+0xd0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d109      	bne.n	8005ad8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	019b      	lsls	r3, r3, #6
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <TIM_OC5_SetConfig+0xb4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00f      	beq.n	8005b8e <TIM_OC5_SetConfig+0x7a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <TIM_OC5_SetConfig+0xb8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <TIM_OC5_SetConfig+0x7a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <TIM_OC5_SetConfig+0xbc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <TIM_OC5_SetConfig+0x7a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <TIM_OC5_SetConfig+0xc0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_OC5_SetConfig+0x7a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a13      	ldr	r2, [pc, #76]	@ (8005bd8 <TIM_OC5_SetConfig+0xc4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d109      	bne.n	8005ba2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	051b      	lsls	r3, r3, #20
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a18      	ldr	r2, [pc, #96]	@ (8005c94 <TIM_OC6_SetConfig+0xb8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00f      	beq.n	8005c58 <TIM_OC6_SetConfig+0x7c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	@ (8005c98 <TIM_OC6_SetConfig+0xbc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <TIM_OC6_SetConfig+0x7c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <TIM_OC6_SetConfig+0xc0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_OC6_SetConfig+0x7c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <TIM_OC6_SetConfig+0xc4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC6_SetConfig+0x7c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a14      	ldr	r2, [pc, #80]	@ (8005ca4 <TIM_OC6_SetConfig+0xc8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d109      	bne.n	8005c6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	029b      	lsls	r3, r3, #10
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40013400 	.word	0x40013400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0210 	bic.w	r2, r3, #16
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f043 0307 	orr.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e068      	b.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e66:	d018      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a13      	ldr	r2, [pc, #76]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a14      	ldr	r2, [pc, #80]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10c      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40014000 	.word	0x40014000

08005eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e040      	b.n	8005fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb faa8 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	@ 0x24
 8005f54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fc32 	bl	80067d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f977 	bl	8006268 <UART_SetConfig>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e01b      	b.n	8005fbc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fcb1 	bl	800691c <UART_CheckIdleState>
 8005fba:	4603      	mov	r3, r0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d177      	bne.n	80060cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_UART_Transmit+0x24>
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e070      	b.n	80060ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2221      	movs	r2, #33	@ 0x21
 8005ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffa:	f7fb fb51 	bl	80016a0 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006018:	d108      	bne.n	800602c <HAL_UART_Transmit+0x68>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e003      	b.n	8006034 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006034:	e02f      	b.n	8006096 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	2180      	movs	r1, #128	@ 0x80
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fd13 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e03b      	b.n	80060ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	881a      	ldrh	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006068:	b292      	uxth	r2, r2
 800606a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	3302      	adds	r3, #2
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e007      	b.n	8006084 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	781a      	ldrb	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3301      	adds	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1c9      	bne.n	8006036 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2140      	movs	r1, #64	@ 0x40
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fcdd 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e005      	b.n	80060ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b08a      	sub	sp, #40	@ 0x28
 80060da:	af02      	add	r7, sp, #8
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	f040 80b6 	bne.w	800625e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_UART_Receive+0x28>
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e0ae      	b.n	8006260 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2222      	movs	r2, #34	@ 0x22
 800610e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006118:	f7fb fac2 	bl	80016a0 <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006136:	d10e      	bne.n	8006156 <HAL_UART_Receive+0x80>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <HAL_UART_Receive+0x76>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006146:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800614a:	e02d      	b.n	80061a8 <HAL_UART_Receive+0xd2>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	22ff      	movs	r2, #255	@ 0xff
 8006150:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006154:	e028      	b.n	80061a8 <HAL_UART_Receive+0xd2>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10d      	bne.n	800617a <HAL_UART_Receive+0xa4>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_UART_Receive+0x9a>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	@ 0xff
 800616a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800616e:	e01b      	b.n	80061a8 <HAL_UART_Receive+0xd2>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	227f      	movs	r2, #127	@ 0x7f
 8006174:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006178:	e016      	b.n	80061a8 <HAL_UART_Receive+0xd2>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006182:	d10d      	bne.n	80061a0 <HAL_UART_Receive+0xca>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_UART_Receive+0xc0>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	227f      	movs	r2, #127	@ 0x7f
 8006190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006194:	e008      	b.n	80061a8 <HAL_UART_Receive+0xd2>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	223f      	movs	r2, #63	@ 0x3f
 800619a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800619e:	e003      	b.n	80061a8 <HAL_UART_Receive+0xd2>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Receive+0xf6>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80061d4:	e037      	b.n	8006246 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2120      	movs	r1, #32
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fc43 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e033      	b.n	8006260 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10c      	bne.n	8006218 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006204:	b29a      	uxth	r2, r3
 8006206:	8a7b      	ldrh	r3, [r7, #18]
 8006208:	4013      	ands	r3, r2
 800620a:	b29a      	uxth	r2, r3
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	3302      	adds	r3, #2
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e00d      	b.n	8006234 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800621e:	b29b      	uxth	r3, r3
 8006220:	b2da      	uxtb	r2, r3
 8006222:	8a7b      	ldrh	r3, [r7, #18]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	4013      	ands	r3, r2
 8006228:	b2da      	uxtb	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1c1      	bne.n	80061d6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e000      	b.n	8006260 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b08a      	sub	sp, #40	@ 0x28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4313      	orrs	r3, r2
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4ba4      	ldr	r3, [pc, #656]	@ (8006528 <UART_SetConfig+0x2c0>)
 8006298:	4013      	ands	r3, r2
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a99      	ldr	r2, [pc, #612]	@ (800652c <UART_SetConfig+0x2c4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	4313      	orrs	r3, r2
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a90      	ldr	r2, [pc, #576]	@ (8006530 <UART_SetConfig+0x2c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d126      	bne.n	8006340 <UART_SetConfig+0xd8>
 80062f2:	4b90      	ldr	r3, [pc, #576]	@ (8006534 <UART_SetConfig+0x2cc>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d81b      	bhi.n	8006338 <UART_SetConfig+0xd0>
 8006300:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <UART_SetConfig+0xa0>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	08006329 	.word	0x08006329
 8006310:	08006321 	.word	0x08006321
 8006314:	08006331 	.word	0x08006331
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631e:	e116      	b.n	800654e <UART_SetConfig+0x2e6>
 8006320:	2302      	movs	r3, #2
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006326:	e112      	b.n	800654e <UART_SetConfig+0x2e6>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632e:	e10e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006336:	e10a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633e:	e106      	b.n	800654e <UART_SetConfig+0x2e6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7c      	ldr	r2, [pc, #496]	@ (8006538 <UART_SetConfig+0x2d0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d138      	bne.n	80063bc <UART_SetConfig+0x154>
 800634a:	4b7a      	ldr	r3, [pc, #488]	@ (8006534 <UART_SetConfig+0x2cc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d82d      	bhi.n	80063b4 <UART_SetConfig+0x14c>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0xf8>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006395 	.word	0x08006395
 8006364:	080063b5 	.word	0x080063b5
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063ad 	.word	0x080063ad
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639a:	e0d8      	b.n	800654e <UART_SetConfig+0x2e6>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a2:	e0d4      	b.n	800654e <UART_SetConfig+0x2e6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063aa:	e0d0      	b.n	800654e <UART_SetConfig+0x2e6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b2:	e0cc      	b.n	800654e <UART_SetConfig+0x2e6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ba:	e0c8      	b.n	800654e <UART_SetConfig+0x2e6>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5e      	ldr	r2, [pc, #376]	@ (800653c <UART_SetConfig+0x2d4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d125      	bne.n	8006412 <UART_SetConfig+0x1aa>
 80063c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <UART_SetConfig+0x2cc>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063d0:	2b30      	cmp	r3, #48	@ 0x30
 80063d2:	d016      	beq.n	8006402 <UART_SetConfig+0x19a>
 80063d4:	2b30      	cmp	r3, #48	@ 0x30
 80063d6:	d818      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d00a      	beq.n	80063f2 <UART_SetConfig+0x18a>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d814      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <UART_SetConfig+0x182>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d008      	beq.n	80063fa <UART_SetConfig+0x192>
 80063e8:	e00f      	b.n	800640a <UART_SetConfig+0x1a2>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f0:	e0ad      	b.n	800654e <UART_SetConfig+0x2e6>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f8:	e0a9      	b.n	800654e <UART_SetConfig+0x2e6>
 80063fa:	2304      	movs	r3, #4
 80063fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006400:	e0a5      	b.n	800654e <UART_SetConfig+0x2e6>
 8006402:	2308      	movs	r3, #8
 8006404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006408:	e0a1      	b.n	800654e <UART_SetConfig+0x2e6>
 800640a:	2310      	movs	r3, #16
 800640c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006410:	e09d      	b.n	800654e <UART_SetConfig+0x2e6>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4a      	ldr	r2, [pc, #296]	@ (8006540 <UART_SetConfig+0x2d8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d125      	bne.n	8006468 <UART_SetConfig+0x200>
 800641c:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006426:	2bc0      	cmp	r3, #192	@ 0xc0
 8006428:	d016      	beq.n	8006458 <UART_SetConfig+0x1f0>
 800642a:	2bc0      	cmp	r3, #192	@ 0xc0
 800642c:	d818      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d00a      	beq.n	8006448 <UART_SetConfig+0x1e0>
 8006432:	2b80      	cmp	r3, #128	@ 0x80
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x1d8>
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d008      	beq.n	8006450 <UART_SetConfig+0x1e8>
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x1f8>
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e082      	b.n	800654e <UART_SetConfig+0x2e6>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e07e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006456:	e07a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645e:	e076      	b.n	800654e <UART_SetConfig+0x2e6>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006466:	e072      	b.n	800654e <UART_SetConfig+0x2e6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	@ (8006544 <UART_SetConfig+0x2dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d12a      	bne.n	80064c8 <UART_SetConfig+0x260>
 8006472:	4b30      	ldr	r3, [pc, #192]	@ (8006534 <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006480:	d01a      	beq.n	80064b8 <UART_SetConfig+0x250>
 8006482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006486:	d81b      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800648c:	d00c      	beq.n	80064a8 <UART_SetConfig+0x240>
 800648e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006492:	d815      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <UART_SetConfig+0x238>
 8006498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800649c:	d008      	beq.n	80064b0 <UART_SetConfig+0x248>
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x258>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a6:	e052      	b.n	800654e <UART_SetConfig+0x2e6>
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ae:	e04e      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b6:	e04a      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e046      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c6:	e042      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a17      	ldr	r2, [pc, #92]	@ (800652c <UART_SetConfig+0x2c4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d13a      	bne.n	8006548 <UART_SetConfig+0x2e0>
 80064d2:	4b18      	ldr	r3, [pc, #96]	@ (8006534 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e0:	d01a      	beq.n	8006518 <UART_SetConfig+0x2b0>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e6:	d81b      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ec:	d00c      	beq.n	8006508 <UART_SetConfig+0x2a0>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f2:	d815      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x298>
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fc:	d008      	beq.n	8006510 <UART_SetConfig+0x2a8>
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x2b8>
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e022      	b.n	800654e <UART_SetConfig+0x2e6>
 8006508:	2302      	movs	r3, #2
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e01e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006510:	2304      	movs	r3, #4
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e01a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006518:	2308      	movs	r3, #8
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e016      	b.n	800654e <UART_SetConfig+0x2e6>
 8006520:	2310      	movs	r3, #16
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e012      	b.n	800654e <UART_SetConfig+0x2e6>
 8006528:	efff69f3 	.word	0xefff69f3
 800652c:	40008000 	.word	0x40008000
 8006530:	40013800 	.word	0x40013800
 8006534:	40021000 	.word	0x40021000
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	40005000 	.word	0x40005000
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a9f      	ldr	r2, [pc, #636]	@ (80067d0 <UART_SetConfig+0x568>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d17a      	bne.n	800664e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800655c:	2b08      	cmp	r3, #8
 800655e:	d824      	bhi.n	80065aa <UART_SetConfig+0x342>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <UART_SetConfig+0x300>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800658d 	.word	0x0800658d
 800656c:	080065ab 	.word	0x080065ab
 8006570:	08006595 	.word	0x08006595
 8006574:	080065ab 	.word	0x080065ab
 8006578:	0800659b 	.word	0x0800659b
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065ab 	.word	0x080065ab
 8006588:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fd fd28 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8006590:	61f8      	str	r0, [r7, #28]
        break;
 8006592:	e010      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b8f      	ldr	r3, [pc, #572]	@ (80067d4 <UART_SetConfig+0x56c>)
 8006596:	61fb      	str	r3, [r7, #28]
        break;
 8006598:	e00d      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fd fc89 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 800659e:	61f8      	str	r0, [r7, #28]
        break;
 80065a0:	e009      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	61fb      	str	r3, [r7, #28]
        break;
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80fb 	beq.w	80067b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d305      	bcc.n	80065da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d903      	bls.n	80065e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065e0:	e0e8      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2200      	movs	r2, #0
 80065e6:	461c      	mov	r4, r3
 80065e8:	4615      	mov	r5, r2
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	022b      	lsls	r3, r5, #8
 80065f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065f8:	0222      	lsls	r2, r4, #8
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6849      	ldr	r1, [r1, #4]
 80065fe:	0849      	lsrs	r1, r1, #1
 8006600:	2000      	movs	r0, #0
 8006602:	4688      	mov	r8, r1
 8006604:	4681      	mov	r9, r0
 8006606:	eb12 0a08 	adds.w	sl, r2, r8
 800660a:	eb43 0b09 	adc.w	fp, r3, r9
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	f7f9 fe26 	bl	8000270 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006632:	d308      	bcc.n	8006646 <UART_SetConfig+0x3de>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663a:	d204      	bcs.n	8006646 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e0b6      	b.n	80067b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800664c:	e0b2      	b.n	80067b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006656:	d15e      	bne.n	8006716 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800665c:	2b08      	cmp	r3, #8
 800665e:	d828      	bhi.n	80066b2 <UART_SetConfig+0x44a>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <UART_SetConfig+0x400>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066b3 	.word	0x080066b3
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066b3 	.word	0x080066b3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fd fca8 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8006690:	61f8      	str	r0, [r7, #28]
        break;
 8006692:	e014      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fd fcba 	bl	800400c <HAL_RCC_GetPCLK2Freq>
 8006698:	61f8      	str	r0, [r7, #28]
        break;
 800669a:	e010      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b4d      	ldr	r3, [pc, #308]	@ (80067d4 <UART_SetConfig+0x56c>)
 800669e:	61fb      	str	r3, [r7, #28]
        break;
 80066a0:	e00d      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fd fc05 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 80066a6:	61f8      	str	r0, [r7, #28]
        break;
 80066a8:	e009      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ae:	61fb      	str	r3, [r7, #28]
        break;
 80066b0:	e005      	b.n	80066be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d077      	beq.n	80067b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005a      	lsls	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	441a      	add	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b0f      	cmp	r3, #15
 80066de:	d916      	bls.n	800670e <UART_SetConfig+0x4a6>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e6:	d212      	bcs.n	800670e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f023 030f 	bic.w	r3, r3, #15
 80066f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	4313      	orrs	r3, r2
 8006702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	8afa      	ldrh	r2, [r7, #22]
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	e052      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006714:	e04e      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006716:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800671a:	2b08      	cmp	r3, #8
 800671c:	d827      	bhi.n	800676e <UART_SetConfig+0x506>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x4bc>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	0800676f 	.word	0x0800676f
 8006734:	0800675f 	.word	0x0800675f
 8006738:	0800676f 	.word	0x0800676f
 800673c:	0800676f 	.word	0x0800676f
 8006740:	0800676f 	.word	0x0800676f
 8006744:	08006767 	.word	0x08006767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fd fc4a 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 800674c:	61f8      	str	r0, [r7, #28]
        break;
 800674e:	e014      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7fd fc5c 	bl	800400c <HAL_RCC_GetPCLK2Freq>
 8006754:	61f8      	str	r0, [r7, #28]
        break;
 8006756:	e010      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006758:	4b1e      	ldr	r3, [pc, #120]	@ (80067d4 <UART_SetConfig+0x56c>)
 800675a:	61fb      	str	r3, [r7, #28]
        break;
 800675c:	e00d      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675e:	f7fd fba7 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8006762:	61f8      	str	r0, [r7, #28]
        break;
 8006764:	e009      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676a:	61fb      	str	r3, [r7, #28]
        break;
 800676c:	e005      	b.n	800677a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006778:	bf00      	nop
    }

    if (pclk != 0U)
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d019      	beq.n	80067b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	085a      	lsrs	r2, r3, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d909      	bls.n	80067ae <UART_SetConfig+0x546>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	d205      	bcs.n	80067ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e002      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3728      	adds	r7, #40	@ 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ce:	bf00      	nop
 80067d0:	40008000 	.word	0x40008000
 80067d4:	00f42400 	.word	0x00f42400

080067d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d6:	d10a      	bne.n	80068ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b098      	sub	sp, #96	@ 0x60
 8006920:	af02      	add	r7, sp, #8
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800692c:	f7fa feb8 	bl	80016a0 <HAL_GetTick>
 8006930:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d12e      	bne.n	800699e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f88c 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d021      	beq.n	800699e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800696e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
 800697a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800697e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e062      	b.n	8006a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d149      	bne.n	8006a40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b4:	2200      	movs	r2, #0
 80069b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f856 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d03c      	beq.n	8006a40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	623b      	str	r3, [r7, #32]
   return(result);
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e6      	bne.n	80069c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a18:	61fa      	str	r2, [r7, #28]
 8006a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	617b      	str	r3, [r7, #20]
   return(result);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e5      	bne.n	80069f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e011      	b.n	8006a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3758      	adds	r7, #88	@ 0x58
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7c:	e049      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d045      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a86:	f7fa fe0b 	bl	80016a0 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e048      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d031      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d110      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f838 	bl	8006b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2208      	movs	r2, #8
 8006ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e029      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aec:	d111      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f81e 	bl	8006b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e00f      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d0a6      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b095      	sub	sp, #84	@ 0x54
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d118      	bne.n	8006be2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f023 0310 	bic.w	r3, r3, #16
 8006bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	613b      	str	r3, [r7, #16]
   return(result);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e6      	bne.n	8006bb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bf6:	bf00      	nop
 8006bf8:	3754      	adds	r7, #84	@ 0x54
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
	...

08006c04 <BUTTON_Get_Pressed>:

int BUTTON_Get_Value(DIRECTION direction){
	return joystick[direction].isOn;
}

int BUTTON_Get_Pressed(DIRECTION direction){
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
	return joystick[direction].hasBeenPressed;
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	4a05      	ldr	r2, [pc, #20]	@ (8006c28 <BUTTON_Get_Pressed+0x24>)
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	4413      	add	r3, r2
 8006c16:	3304      	adds	r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	2000000c 	.word	0x2000000c

08006c2c <BUTTON_Update>:

void BUTTON_Update(){
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
	for (int i=0;i<5;i++){
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	e02c      	b.n	8006c92 <BUTTON_Update+0x66>
		int newVal = 1-HAL_GPIO_ReadPin(joystick[i].port,joystick[i].pinNumber);
 8006c38:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca4 <BUTTON_Update+0x78>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	4413      	add	r3, r2
 8006c40:	3308      	adds	r3, #8
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4917      	ldr	r1, [pc, #92]	@ (8006ca4 <BUTTON_Update+0x78>)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	440b      	add	r3, r1
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	4619      	mov	r1, r3
 8006c52:	4610      	mov	r0, r2
 8006c54:	f7fb ff60 	bl	8002b18 <HAL_GPIO_ReadPin>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f1c3 0301 	rsb	r3, r3, #1
 8006c5e:	603b      	str	r3, [r7, #0]
		joystick[i].hasBeenPressed=(1-joystick[i].isOn) * newVal;
 8006c60:	4a10      	ldr	r2, [pc, #64]	@ (8006ca4 <BUTTON_Update+0x78>)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	4413      	add	r3, r2
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1c3 0301 	rsb	r3, r3, #1
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	fb03 f202 	mul.w	r2, r3, r2
 8006c74:	490b      	ldr	r1, [pc, #44]	@ (8006ca4 <BUTTON_Update+0x78>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	601a      	str	r2, [r3, #0]
		joystick[i].isOn = newVal;
 8006c80:	4a08      	ldr	r2, [pc, #32]	@ (8006ca4 <BUTTON_Update+0x78>)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4413      	add	r3, r2
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]
	for (int i=0;i<5;i++){
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	ddcf      	ble.n	8006c38 <BUTTON_Update+0xc>
	}
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000000c 	.word	0x2000000c

08006ca8 <LED_Set_Value_With_Int>:
static LED led_bar[8]={{0,LED_0_GPIO_Port,LED_0_Pin},{0,LED_1_GPIO_Port,LED_1_Pin},
		{0,LED_2_GPIO_Port,LED_2_Pin},{0,LED_3_GPIO_Port,LED_3_Pin},
		{0,LED_4_GPIO_Port,LED_4_Pin},{0,LED_5_GPIO_Port,LED_5_Pin},
		{0,LED_6_GPIO_Port,LED_6_Pin},{0,LED_7_GPIO_Port,LED_7_Pin}};

void LED_Set_Value_With_Int(int value){
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	for (int i=0;i<LED_BAR_SIZE;i++){
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e010      	b.n	8006cd8 <LED_Set_Value_With_Int+0x30>
		led_bar[i].isOn=(value>>i)&1;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	fa42 f303 	asr.w	r3, r2, r3
 8006cbe:	f003 0101 	and.w	r1, r3, #1
 8006cc2:	480a      	ldr	r0, [pc, #40]	@ (8006cec <LED_Set_Value_With_Int+0x44>)
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4403      	add	r3, r0
 8006cd0:	6019      	str	r1, [r3, #0]
	for (int i=0;i<LED_BAR_SIZE;i++){
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b07      	cmp	r3, #7
 8006cdc:	ddeb      	ble.n	8006cb6 <LED_Set_Value_With_Int+0xe>
	}
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	2000005c 	.word	0x2000005c

08006cf0 <LED_Update>:
			toReturn+=(led_bar[i].isOn)<<i;
		}
	return toReturn;
}

void LED_Update(){
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
	for (int i=0;i<8;i++){
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	e023      	b.n	8006d44 <LED_Update+0x54>
		HAL_GPIO_WritePin(led_bar[i].port,led_bar[i].pinNumber,(led_bar[i].isOn)&1);
 8006cfc:	4915      	ldr	r1, [pc, #84]	@ (8006d54 <LED_Update+0x64>)
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	4911      	ldr	r1, [pc, #68]	@ (8006d54 <LED_Update+0x64>)
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	8819      	ldrh	r1, [r3, #0]
 8006d20:	4c0c      	ldr	r4, [pc, #48]	@ (8006d54 <LED_Update+0x64>)
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4423      	add	r3, r4
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f7fb ff05 	bl	8002b48 <HAL_GPIO_WritePin>
	for (int i=0;i<8;i++){
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3301      	adds	r3, #1
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b07      	cmp	r3, #7
 8006d48:	ddd8      	ble.n	8006cfc <LED_Update+0xc>
	}
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd90      	pop	{r4, r7, pc}
 8006d54:	2000005c 	.word	0x2000005c

08006d58 <ssd1315_Init>:
  * @brief  Initialise the ssd1315 LCD Component.
  * @param  None
  * @retval None
  */
void ssd1315_Init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  if(Is_ssd1315_Initialized == 0)
 8006d5c:	4b16      	ldr	r3, [pc, #88]	@ (8006db8 <ssd1315_Init+0x60>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11f      	bne.n	8006da4 <ssd1315_Init+0x4c>
  {
    Is_ssd1315_Initialized = 1;
 8006d64:	4b14      	ldr	r3, [pc, #80]	@ (8006db8 <ssd1315_Init+0x60>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	701a      	strb	r2, [r3, #0]
    /* Initialise ssd1315 low level bus layer --------------------------------*/
    LCD_IO_Init();
 8006d6a:	f000 f93d 	bl	8006fe8 <LCD_IO_Init>

    /* Driving ability setting */
    /* Initialisation sequence */
    LCD_IO_WriteCommand(0x80);
 8006d6e:	2080      	movs	r0, #128	@ 0x80
 8006d70:	f000 f96e 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x8D);  /* Disable charge pump regulator */
 8006d74:	208d      	movs	r0, #141	@ 0x8d
 8006d76:	f000 f96b 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x14);
 8006d7a:	2014      	movs	r0, #20
 8006d7c:	f000 f968 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x20);  /* Set Memory Addressing Mode */
 8006d80:	2020      	movs	r0, #32
 8006d82:	f000 f965 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x00);  /* 00b: Horizontal Addressing Mode */
 8006d86:	2000      	movs	r0, #0
 8006d88:	f000 f962 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x40);  /* 00b: Horizontal Addressing Mode */
 8006d8c:	2040      	movs	r0, #64	@ 0x40
 8006d8e:	f000 f95f 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xC8);  /* c8:flip the 64 rows */
 8006d92:	20c8      	movs	r0, #200	@ 0xc8
 8006d94:	f000 f95c 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xA1);  /* a1:flip the 128 columns */
 8006d98:	20a1      	movs	r0, #161	@ 0xa1
 8006d9a:	f000 f959 	bl	8007050 <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xAF);  /* Display On */
 8006d9e:	20af      	movs	r0, #175	@ 0xaf
 8006da0:	f000 f956 	bl	8007050 <LCD_IO_WriteCommand>
  }

  ssd1315_Clear(SSD1315_COLOR_BLACK);
 8006da4:	2000      	movs	r0, #0
 8006da6:	f000 f80b 	bl	8006dc0 <ssd1315_Clear>

  LCD_IO_WriteMultipleData((uint8_t*)PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8006daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006dae:	4803      	ldr	r0, [pc, #12]	@ (8006dbc <ssd1315_Init+0x64>)
 8006db0:	f000 f96c 	bl	800708c <LCD_IO_WriteMultipleData>
}
 8006db4:	bf00      	nop
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000544 	.word	0x20000544
 8006dbc:	20000550 	.word	0x20000550

08006dc0 <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode: the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_Clear(uint16_t ColorCode)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	2bff      	cmp	r3, #255	@ 0xff
 8006dce:	d106      	bne.n	8006dde <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, 0xFF, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8006dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dd4:	21ff      	movs	r1, #255	@ 0xff
 8006dd6:	4807      	ldr	r0, [pc, #28]	@ (8006df4 <ssd1315_Clear+0x34>)
 8006dd8:	f000 fc88 	bl	80076ec <memset>
  }
  else
  {
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 8006ddc:	e005      	b.n	8006dea <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8006dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006de2:	2100      	movs	r1, #0
 8006de4:	4803      	ldr	r0, [pc, #12]	@ (8006df4 <ssd1315_Clear+0x34>)
 8006de6:	f000 fc81 	bl	80076ec <memset>
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20000550 	.word	0x20000550

08006df8 <ssd1315_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  ColorCode: the pixel color (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t ColorCode)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	80fb      	strh	r3, [r7, #6]
 8006e02:	460b      	mov	r3, r1
 8006e04:	80bb      	strh	r3, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	807b      	strh	r3, [r7, #2]
  /* Set color */
  if (ColorCode == SSD1315_COLOR_WHITE) {
 8006e0a:	887b      	ldrh	r3, [r7, #2]
 8006e0c:	2bff      	cmp	r3, #255	@ 0xff
 8006e0e:	d11a      	bne.n	8006e46 <ssd1315_WritePixel+0x4e>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	88bb      	ldrh	r3, [r7, #4]
 8006e14:	08db      	lsrs	r3, r3, #3
 8006e16:	b298      	uxth	r0, r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	01db      	lsls	r3, r3, #7
 8006e1c:	4413      	add	r3, r2
 8006e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e8c <ssd1315_WritePixel+0x94>)
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
 8006e22:	b25a      	sxtb	r2, r3
 8006e24:	88bb      	ldrh	r3, [r7, #4]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	4313      	orrs	r3, r2
 8006e34:	b259      	sxtb	r1, r3
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	4603      	mov	r3, r0
 8006e3a:	01db      	lsls	r3, r3, #7
 8006e3c:	4413      	add	r3, r2
 8006e3e:	b2c9      	uxtb	r1, r1
 8006e40:	4a12      	ldr	r2, [pc, #72]	@ (8006e8c <ssd1315_WritePixel+0x94>)
 8006e42:	54d1      	strb	r1, [r2, r3]
  } else {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
  }
}
 8006e44:	e01b      	b.n	8006e7e <ssd1315_WritePixel+0x86>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	88bb      	ldrh	r3, [r7, #4]
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	b298      	uxth	r0, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	01db      	lsls	r3, r3, #7
 8006e52:	4413      	add	r3, r2
 8006e54:	4a0d      	ldr	r2, [pc, #52]	@ (8006e8c <ssd1315_WritePixel+0x94>)
 8006e56:	5cd3      	ldrb	r3, [r2, r3]
 8006e58:	b25a      	sxtb	r2, r3
 8006e5a:	88bb      	ldrh	r3, [r7, #4]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	2101      	movs	r1, #1
 8006e62:	fa01 f303 	lsl.w	r3, r1, r3
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	b259      	sxtb	r1, r3
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	4603      	mov	r3, r0
 8006e74:	01db      	lsls	r3, r3, #7
 8006e76:	4413      	add	r3, r2
 8006e78:	b2c9      	uxtb	r1, r1
 8006e7a:	4a04      	ldr	r2, [pc, #16]	@ (8006e8c <ssd1315_WritePixel+0x94>)
 8006e7c:	54d1      	strb	r1, [r2, r3]
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000550 	.word	0x20000550

08006e90 <ssd1315_Refresh>:
  * @brief  Refresh Displays.
  * @param  None
  * @retval None
  */
void ssd1315_Refresh(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* Set Display Start Line to 0*/
  LCD_IO_WriteCommand(0x40);
 8006e94:	2040      	movs	r0, #64	@ 0x40
 8006e96:	f000 f8db 	bl	8007050 <LCD_IO_WriteCommand>
  /* Set Column Address Setup column start(0) and end address (127)*/
  LCD_IO_WriteCommand(0x21);
 8006e9a:	2021      	movs	r0, #33	@ 0x21
 8006e9c:	f000 f8d8 	bl	8007050 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f000 f8d5 	bl	8007050 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x7F);
 8006ea6:	207f      	movs	r0, #127	@ 0x7f
 8006ea8:	f000 f8d2 	bl	8007050 <LCD_IO_WriteCommand>
  /* Set Page Address Setup page start (0)  and end address (7)*/
  LCD_IO_WriteCommand(0x22);
 8006eac:	2022      	movs	r0, #34	@ 0x22
 8006eae:	f000 f8cf 	bl	8007050 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f000 f8cc 	bl	8007050 <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x07);
 8006eb8:	2007      	movs	r0, #7
 8006eba:	f000 f8c9 	bl	8007050 <LCD_IO_WriteCommand>
  /* Fill Buffer in GDDRAM of LCD */
  LCD_IO_WriteMultipleData(PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8006ebe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ec2:	4802      	ldr	r0, [pc, #8]	@ (8006ecc <ssd1315_Refresh+0x3c>)
 8006ec4:	f000 f8e2 	bl	800708c <LCD_IO_WriteMultipleData>
}
 8006ec8:	bf00      	nop
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000550 	.word	0x20000550

08006ed0 <ssd1315_DrawChar>:

/**
* @}
*/
void ssd1315_DrawChar(uint8_t X, uint8_t Y, char c, FontDef_t * font){
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4603      	mov	r3, r0
 8006eda:	71fb      	strb	r3, [r7, #7]
 8006edc:	460b      	mov	r3, r1
 8006ede:	71bb      	strb	r3, [r7, #6]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<font->FontHeight;i++){
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e047      	b.n	8006f7a <ssd1315_DrawChar+0xaa>
		uint16_t line = (font->data)[((c-32)*font->FontHeight)+i];
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	797b      	ldrb	r3, [r7, #5]
 8006ef0:	3b20      	subs	r3, #32
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	7849      	ldrb	r1, [r1, #1]
 8006ef6:	fb03 f101 	mul.w	r1, r3, r1
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	440b      	add	r3, r1
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	81fb      	strh	r3, [r7, #14]
		for (int j=0;j<font->FontWidth;j++){
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	e02d      	b.n	8006f68 <ssd1315_DrawChar+0x98>
			if (((line>>(15-j))&1)==1)
 8006f0c:	89fa      	ldrh	r2, [r7, #14]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f1c3 030f 	rsb	r3, r3, #15
 8006f14:	fa42 f303 	asr.w	r3, r2, r3
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d010      	beq.n	8006f42 <ssd1315_DrawChar+0x72>
				ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_WHITE);
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	4413      	add	r3, r2
 8006f2a:	b298      	uxth	r0, r3
 8006f2c:	79bb      	ldrb	r3, [r7, #6]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4413      	add	r3, r2
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	22ff      	movs	r2, #255	@ 0xff
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f7ff ff5c 	bl	8006df8 <ssd1315_WritePixel>
 8006f40:	e00f      	b.n	8006f62 <ssd1315_DrawChar+0x92>
			else{ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_BLACK);}
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	b298      	uxth	r0, r3
 8006f4e:	79bb      	ldrb	r3, [r7, #6]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4413      	add	r3, r2
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	f7ff ff4b 	bl	8006df8 <ssd1315_WritePixel>
		for (int j=0;j<font->FontWidth;j++){
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4293      	cmp	r3, r2
 8006f72:	dbcb      	blt.n	8006f0c <ssd1315_DrawChar+0x3c>
	for(int i=0;i<font->FontHeight;i++){
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3301      	adds	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	4293      	cmp	r3, r2
 8006f84:	dbb1      	blt.n	8006eea <ssd1315_DrawChar+0x1a>
		}
	}
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <ssd1315_Draw_String>:

void ssd1315_Draw_String(uint8_t X, uint8_t Y, char * s, FontDef_t * font){
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60ba      	str	r2, [r7, #8]
 8006f98:	607b      	str	r3, [r7, #4]
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	73bb      	strb	r3, [r7, #14]
	int column=0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 8006fa6:	e015      	b.n	8006fd4 <ssd1315_Draw_String+0x44>
		ssd1315_DrawChar(X+(column*font->FontWidth),Y,*s,font);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	fb12 f303 	smulbb	r3, r2, r3
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	4413      	add	r3, r2
 8006fba:	b2d8      	uxtb	r0, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781a      	ldrb	r2, [r3, #0]
 8006fc0:	7bb9      	ldrb	r1, [r7, #14]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f7ff ff84 	bl	8006ed0 <ssd1315_DrawChar>
		s++;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	60bb      	str	r3, [r7, #8]
		column++;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <ssd1315_Draw_String+0x18>
	}
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <LCD_IO_Init>:

extern I2C_HandleTypeDef hi2c1;

int ssd1315_i2c_adress;

void LCD_IO_Init(){
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af02      	add	r7, sp, #8
	int status;
	HAL_I2C_Init(&hi2c1);
 8006fee:	4814      	ldr	r0, [pc, #80]	@ (8007040 <LCD_IO_Init+0x58>)
 8006ff0:	f7fb fdc2 	bl	8002b78 <HAL_I2C_Init>
		for (int i=0;i<255;i++){
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e018      	b.n	800702c <LCD_IO_Init+0x44>
			status=HAL_I2C_Master_Transmit(&hi2c1,i,NULL,0,10);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	b299      	uxth	r1, r3
 8006ffe:	230a      	movs	r3, #10
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	2200      	movs	r2, #0
 8007006:	480e      	ldr	r0, [pc, #56]	@ (8007040 <LCD_IO_Init+0x58>)
 8007008:	f7fb fe52 	bl	8002cb0 <HAL_I2C_Master_Transmit>
 800700c:	4603      	mov	r3, r0
 800700e:	603b      	str	r3, [r7, #0]
			if(status==HAL_OK){
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d107      	bne.n	8007026 <LCD_IO_Init+0x3e>
				printf("Found one display at 0x%x\r\n",i);
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	480a      	ldr	r0, [pc, #40]	@ (8007044 <LCD_IO_Init+0x5c>)
 800701a:	f000 f9ff 	bl	800741c <iprintf>
				ssd1315_i2c_adress=i;
 800701e:	4a0a      	ldr	r2, [pc, #40]	@ (8007048 <LCD_IO_Init+0x60>)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6013      	str	r3, [r2, #0]
				return;
 8007024:	e008      	b.n	8007038 <LCD_IO_Init+0x50>
		for (int i=0;i<255;i++){
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3301      	adds	r3, #1
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007030:	dde3      	ble.n	8006ffa <LCD_IO_Init+0x12>
			}
		}
	printf("Found no LCD in I2C bus \r\n");
 8007032:	4806      	ldr	r0, [pc, #24]	@ (800704c <LCD_IO_Init+0x64>)
 8007034:	f000 fa5a 	bl	80074ec <puts>
}
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000240 	.word	0x20000240
 8007044:	08008598 	.word	0x08008598
 8007048:	20000950 	.word	0x20000950
 800704c:	080085b4 	.word	0x080085b4

08007050 <LCD_IO_WriteCommand>:
void LCD_IO_WriteCommand(uint8_t Value){
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af02      	add	r7, sp, #8
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
	uint8_t command_buffer[2]={0x80,0};
 800705a:	2380      	movs	r3, #128	@ 0x80
 800705c:	81bb      	strh	r3, [r7, #12]
	command_buffer[1]=Value;
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,command_buffer,2,-1);
 8007062:	4b08      	ldr	r3, [pc, #32]	@ (8007084 <LCD_IO_WriteCommand+0x34>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	b299      	uxth	r1, r3
 8007068:	f107 020c 	add.w	r2, r7, #12
 800706c:	f04f 33ff 	mov.w	r3, #4294967295
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	2302      	movs	r3, #2
 8007074:	4804      	ldr	r0, [pc, #16]	@ (8007088 <LCD_IO_WriteCommand+0x38>)
 8007076:	f7fb fe1b 	bl	8002cb0 <HAL_I2C_Master_Transmit>
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000950 	.word	0x20000950
 8007088:	20000240 	.word	0x20000240

0800708c <LCD_IO_WriteMultipleData>:
void    LCD_IO_WriteData(uint8_t Value){
	uint8_t data_buffer[2]={0xc0,0};
	data_buffer[1]=Value;
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,2,-1);
}
void    LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size){
 800708c:	b580      	push	{r7, lr}
 800708e:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8007092:	af02      	add	r7, sp, #8
 8007094:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8007098:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800709c:	6018      	str	r0, [r3, #0]
 800709e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80070a2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80070a6:	6019      	str	r1, [r3, #0]
	uint8_t data_buffer[1025];
	data_buffer[0]=0x40;
 80070a8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80070ac:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80070b0:	2240      	movs	r2, #64	@ 0x40
 80070b2:	701a      	strb	r2, [r3, #0]
	memcpy(data_buffer+1,pData,Size+1);
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	3301      	adds	r3, #1
 80070ba:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 80070be:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 80070c2:	6812      	ldr	r2, [r2, #0]
 80070c4:	3201      	adds	r2, #1
 80070c6:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80070ca:	f2a1 410c 	subw	r1, r1, #1036	@ 0x40c
 80070ce:	6809      	ldr	r1, [r1, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fb86 	bl	80077e2 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,Size+1,-1);
 80070d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007108 <LCD_IO_WriteMultipleData+0x7c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	b299      	uxth	r1, r3
 80070dc:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80070e0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3301      	adds	r3, #1
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f107 020c 	add.w	r2, r7, #12
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	9000      	str	r0, [sp, #0]
 80070f6:	4805      	ldr	r0, [pc, #20]	@ (800710c <LCD_IO_WriteMultipleData+0x80>)
 80070f8:	f7fb fdda 	bl	8002cb0 <HAL_I2C_Master_Transmit>

}
 80070fc:	bf00      	nop
 80070fe:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000950 	.word	0x20000950
 800710c:	20000240 	.word	0x20000240

08007110 <taskLED>:

const MOTIF_TYPE* tableau_motif[3]={&upDown, &chenillardUp, &chenillardDown};

static int index_tableau_motif=0;

void taskLED(){
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
	int numero_motif=(HAL_GetTick()/globalDelayInMs)%(tableau_motif[index_tableau_motif]->size);
 8007116:	f7fa fac3 	bl	80016a0 <HAL_GetTick>
 800711a:	4603      	mov	r3, r0
 800711c:	4a11      	ldr	r2, [pc, #68]	@ (8007164 <taskLED+0x54>)
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	fbb3 f3f2 	udiv	r3, r3, r2
 8007124:	4a10      	ldr	r2, [pc, #64]	@ (8007168 <taskLED+0x58>)
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	4910      	ldr	r1, [pc, #64]	@ (800716c <taskLED+0x5c>)
 800712a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	fbb3 f1f2 	udiv	r1, r3, r2
 8007134:	fb01 f202 	mul.w	r2, r1, r2
 8007138:	1a9b      	subs	r3, r3, r2
 800713a:	607b      	str	r3, [r7, #4]
	LED_Set_Value_With_Int(tableau_motif[index_tableau_motif]->motif[numero_motif]);
 800713c:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <taskLED+0x58>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0a      	ldr	r2, [pc, #40]	@ (800716c <taskLED+0x5c>)
 8007142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fda9 	bl	8006ca8 <LED_Set_Value_With_Int>
	LED_Update();
 8007156:	f7ff fdcb 	bl	8006cf0 <LED_Update>
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200000c4 	.word	0x200000c4
 8007168:	20000954 	.word	0x20000954
 800716c:	2000014c 	.word	0x2000014c

08007170 <taskButton>:
void taskButton(){
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	BUTTON_Update();
 8007174:	f7ff fd5a 	bl	8006c2c <BUTTON_Update>
	/*printf("direction : U=%d\tD=%d\tL=%d\tR=%d\tC=%d\r\n",BUTTON_Get_Value(UP),BUTTON_Get_Value(DOWN),
			BUTTON_Get_Value(LEFT),BUTTON_Get_Value(RIGHT),BUTTON_Get_Value(CENTER));*/
	if(BUTTON_Get_Pressed(UP)==1){
 8007178:	2003      	movs	r0, #3
 800717a:	f7ff fd43 	bl	8006c04 <BUTTON_Get_Pressed>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10a      	bne.n	800719a <taskButton+0x2a>
		printf("Going up \r\n");
 8007184:	481b      	ldr	r0, [pc, #108]	@ (80071f4 <taskButton+0x84>)
 8007186:	f000 f9b1 	bl	80074ec <puts>
		globalDelayInMs+=50;
 800718a:	4b1b      	ldr	r3, [pc, #108]	@ (80071f8 <taskButton+0x88>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3332      	adds	r3, #50	@ 0x32
 8007190:	4a19      	ldr	r2, [pc, #100]	@ (80071f8 <taskButton+0x88>)
 8007192:	6013      	str	r3, [r2, #0]
		needDisplayRefresh=1;
 8007194:	4b19      	ldr	r3, [pc, #100]	@ (80071fc <taskButton+0x8c>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
	}
	if(BUTTON_Get_Pressed(DOWN)==1){
 800719a:	2001      	movs	r0, #1
 800719c:	f7ff fd32 	bl	8006c04 <BUTTON_Get_Pressed>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d10a      	bne.n	80071bc <taskButton+0x4c>
			printf("Going down \r\n");
 80071a6:	4816      	ldr	r0, [pc, #88]	@ (8007200 <taskButton+0x90>)
 80071a8:	f000 f9a0 	bl	80074ec <puts>
			globalDelayInMs-=50;
 80071ac:	4b12      	ldr	r3, [pc, #72]	@ (80071f8 <taskButton+0x88>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3b32      	subs	r3, #50	@ 0x32
 80071b2:	4a11      	ldr	r2, [pc, #68]	@ (80071f8 <taskButton+0x88>)
 80071b4:	6013      	str	r3, [r2, #0]
			needDisplayRefresh=1;
 80071b6:	4b11      	ldr	r3, [pc, #68]	@ (80071fc <taskButton+0x8c>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
	}

	if(BUTTON_Get_Pressed(CENTER)==1){
 80071bc:	2000      	movs	r0, #0
 80071be:	f7ff fd21 	bl	8006c04 <BUTTON_Get_Pressed>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d113      	bne.n	80071f0 <taskButton+0x80>
			printf("Change motif\r\n");
 80071c8:	480e      	ldr	r0, [pc, #56]	@ (8007204 <taskButton+0x94>)
 80071ca:	f000 f98f 	bl	80074ec <puts>
			index_tableau_motif=(index_tableau_motif+1)%3;
 80071ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <taskButton+0x98>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	1c59      	adds	r1, r3, #1
 80071d4:	4b0d      	ldr	r3, [pc, #52]	@ (800720c <taskButton+0x9c>)
 80071d6:	fb83 3201 	smull	r3, r2, r3, r1
 80071da:	17cb      	asrs	r3, r1, #31
 80071dc:	1ad2      	subs	r2, r2, r3
 80071de:	4613      	mov	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	1aca      	subs	r2, r1, r3
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <taskButton+0x98>)
 80071e8:	601a      	str	r2, [r3, #0]
			needDisplayRefresh=1;
 80071ea:	4b04      	ldr	r3, [pc, #16]	@ (80071fc <taskButton+0x8c>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
		}
}
 80071f0:	bf00      	nop
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	080085e8 	.word	0x080085e8
 80071f8:	200000c4 	.word	0x200000c4
 80071fc:	200000c8 	.word	0x200000c8
 8007200:	080085f4 	.word	0x080085f4
 8007204:	08008604 	.word	0x08008604
 8007208:	20000954 	.word	0x20000954
 800720c:	55555556 	.word	0x55555556

08007210 <taskScreen>:
void taskScreen(){
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
	char buffer[16]={0};
 8007216:	2300      	movs	r3, #0
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	1d3b      	adds	r3, r7, #4
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	609a      	str	r2, [r3, #8]
	if (needDisplayRefresh==1){
 8007224:	4b15      	ldr	r3, [pc, #84]	@ (800727c <taskScreen+0x6c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d11f      	bne.n	800726c <taskScreen+0x5c>
		// snprintf plutot
		sprintf(buffer,"Speed= %d   ",globalDelayInMs);
 800722c:	4b14      	ldr	r3, [pc, #80]	@ (8007280 <taskScreen+0x70>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	463b      	mov	r3, r7
 8007232:	4914      	ldr	r1, [pc, #80]	@ (8007284 <taskScreen+0x74>)
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f961 	bl	80074fc <siprintf>
		ssd1315_Draw_String(0,16,buffer,&Font_7x10);
 800723a:	463a      	mov	r2, r7
 800723c:	4b12      	ldr	r3, [pc, #72]	@ (8007288 <taskScreen+0x78>)
 800723e:	2110      	movs	r1, #16
 8007240:	2000      	movs	r0, #0
 8007242:	f7ff fea5 	bl	8006f90 <ssd1315_Draw_String>
		sprintf(buffer,"%s      ",tableau_motif[index_tableau_motif]->name);
 8007246:	4b11      	ldr	r3, [pc, #68]	@ (800728c <taskScreen+0x7c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a11      	ldr	r2, [pc, #68]	@ (8007290 <taskScreen+0x80>)
 800724c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	463b      	mov	r3, r7
 8007254:	490f      	ldr	r1, [pc, #60]	@ (8007294 <taskScreen+0x84>)
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f950 	bl	80074fc <siprintf>
		ssd1315_Draw_String(0,32,buffer,&Font_7x10);
 800725c:	463a      	mov	r2, r7
 800725e:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <taskScreen+0x78>)
 8007260:	2120      	movs	r1, #32
 8007262:	2000      	movs	r0, #0
 8007264:	f7ff fe94 	bl	8006f90 <ssd1315_Draw_String>
		ssd1315_Refresh();
 8007268:	f7ff fe12 	bl	8006e90 <ssd1315_Refresh>
	}
	needDisplayRefresh=0;
 800726c:	4b03      	ldr	r3, [pc, #12]	@ (800727c <taskScreen+0x6c>)
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]

}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200000c8 	.word	0x200000c8
 8007280:	200000c4 	.word	0x200000c4
 8007284:	08008614 	.word	0x08008614
 8007288:	200000bc 	.word	0x200000bc
 800728c:	20000954 	.word	0x20000954
 8007290:	2000014c 	.word	0x2000014c
 8007294:	08008624 	.word	0x08008624

08007298 <std>:
 8007298:	2300      	movs	r3, #0
 800729a:	b510      	push	{r4, lr}
 800729c:	4604      	mov	r4, r0
 800729e:	e9c0 3300 	strd	r3, r3, [r0]
 80072a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072a6:	6083      	str	r3, [r0, #8]
 80072a8:	8181      	strh	r1, [r0, #12]
 80072aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80072ac:	81c2      	strh	r2, [r0, #14]
 80072ae:	6183      	str	r3, [r0, #24]
 80072b0:	4619      	mov	r1, r3
 80072b2:	2208      	movs	r2, #8
 80072b4:	305c      	adds	r0, #92	@ 0x5c
 80072b6:	f000 fa19 	bl	80076ec <memset>
 80072ba:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <std+0x58>)
 80072bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80072be:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <std+0x5c>)
 80072c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <std+0x60>)
 80072c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072c6:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <std+0x64>)
 80072c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <std+0x68>)
 80072cc:	6224      	str	r4, [r4, #32]
 80072ce:	429c      	cmp	r4, r3
 80072d0:	d006      	beq.n	80072e0 <std+0x48>
 80072d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072d6:	4294      	cmp	r4, r2
 80072d8:	d002      	beq.n	80072e0 <std+0x48>
 80072da:	33d0      	adds	r3, #208	@ 0xd0
 80072dc:	429c      	cmp	r4, r3
 80072de:	d105      	bne.n	80072ec <std+0x54>
 80072e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e8:	f000 ba78 	b.w	80077dc <__retarget_lock_init_recursive>
 80072ec:	bd10      	pop	{r4, pc}
 80072ee:	bf00      	nop
 80072f0:	0800753d 	.word	0x0800753d
 80072f4:	0800755f 	.word	0x0800755f
 80072f8:	08007597 	.word	0x08007597
 80072fc:	080075bb 	.word	0x080075bb
 8007300:	20000958 	.word	0x20000958

08007304 <stdio_exit_handler>:
 8007304:	4a02      	ldr	r2, [pc, #8]	@ (8007310 <stdio_exit_handler+0xc>)
 8007306:	4903      	ldr	r1, [pc, #12]	@ (8007314 <stdio_exit_handler+0x10>)
 8007308:	4803      	ldr	r0, [pc, #12]	@ (8007318 <stdio_exit_handler+0x14>)
 800730a:	f000 b869 	b.w	80073e0 <_fwalk_sglue>
 800730e:	bf00      	nop
 8007310:	20000158 	.word	0x20000158
 8007314:	08008349 	.word	0x08008349
 8007318:	20000168 	.word	0x20000168

0800731c <cleanup_stdio>:
 800731c:	6841      	ldr	r1, [r0, #4]
 800731e:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <cleanup_stdio+0x34>)
 8007320:	4299      	cmp	r1, r3
 8007322:	b510      	push	{r4, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	d001      	beq.n	800732c <cleanup_stdio+0x10>
 8007328:	f001 f80e 	bl	8008348 <_fflush_r>
 800732c:	68a1      	ldr	r1, [r4, #8]
 800732e:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <cleanup_stdio+0x38>)
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <cleanup_stdio+0x1e>
 8007334:	4620      	mov	r0, r4
 8007336:	f001 f807 	bl	8008348 <_fflush_r>
 800733a:	68e1      	ldr	r1, [r4, #12]
 800733c:	4b06      	ldr	r3, [pc, #24]	@ (8007358 <cleanup_stdio+0x3c>)
 800733e:	4299      	cmp	r1, r3
 8007340:	d004      	beq.n	800734c <cleanup_stdio+0x30>
 8007342:	4620      	mov	r0, r4
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007348:	f000 bffe 	b.w	8008348 <_fflush_r>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	bf00      	nop
 8007350:	20000958 	.word	0x20000958
 8007354:	200009c0 	.word	0x200009c0
 8007358:	20000a28 	.word	0x20000a28

0800735c <global_stdio_init.part.0>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <global_stdio_init.part.0+0x30>)
 8007360:	4c0b      	ldr	r4, [pc, #44]	@ (8007390 <global_stdio_init.part.0+0x34>)
 8007362:	4a0c      	ldr	r2, [pc, #48]	@ (8007394 <global_stdio_init.part.0+0x38>)
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	4620      	mov	r0, r4
 8007368:	2200      	movs	r2, #0
 800736a:	2104      	movs	r1, #4
 800736c:	f7ff ff94 	bl	8007298 <std>
 8007370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007374:	2201      	movs	r2, #1
 8007376:	2109      	movs	r1, #9
 8007378:	f7ff ff8e 	bl	8007298 <std>
 800737c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007380:	2202      	movs	r2, #2
 8007382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007386:	2112      	movs	r1, #18
 8007388:	f7ff bf86 	b.w	8007298 <std>
 800738c:	20000a90 	.word	0x20000a90
 8007390:	20000958 	.word	0x20000958
 8007394:	08007305 	.word	0x08007305

08007398 <__sfp_lock_acquire>:
 8007398:	4801      	ldr	r0, [pc, #4]	@ (80073a0 <__sfp_lock_acquire+0x8>)
 800739a:	f000 ba20 	b.w	80077de <__retarget_lock_acquire_recursive>
 800739e:	bf00      	nop
 80073a0:	20000a99 	.word	0x20000a99

080073a4 <__sfp_lock_release>:
 80073a4:	4801      	ldr	r0, [pc, #4]	@ (80073ac <__sfp_lock_release+0x8>)
 80073a6:	f000 ba1b 	b.w	80077e0 <__retarget_lock_release_recursive>
 80073aa:	bf00      	nop
 80073ac:	20000a99 	.word	0x20000a99

080073b0 <__sinit>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4604      	mov	r4, r0
 80073b4:	f7ff fff0 	bl	8007398 <__sfp_lock_acquire>
 80073b8:	6a23      	ldr	r3, [r4, #32]
 80073ba:	b11b      	cbz	r3, 80073c4 <__sinit+0x14>
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c0:	f7ff bff0 	b.w	80073a4 <__sfp_lock_release>
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <__sinit+0x28>)
 80073c6:	6223      	str	r3, [r4, #32]
 80073c8:	4b04      	ldr	r3, [pc, #16]	@ (80073dc <__sinit+0x2c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f5      	bne.n	80073bc <__sinit+0xc>
 80073d0:	f7ff ffc4 	bl	800735c <global_stdio_init.part.0>
 80073d4:	e7f2      	b.n	80073bc <__sinit+0xc>
 80073d6:	bf00      	nop
 80073d8:	0800731d 	.word	0x0800731d
 80073dc:	20000a90 	.word	0x20000a90

080073e0 <_fwalk_sglue>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4607      	mov	r7, r0
 80073e6:	4688      	mov	r8, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	2600      	movs	r6, #0
 80073ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f0:	f1b9 0901 	subs.w	r9, r9, #1
 80073f4:	d505      	bpl.n	8007402 <_fwalk_sglue+0x22>
 80073f6:	6824      	ldr	r4, [r4, #0]
 80073f8:	2c00      	cmp	r4, #0
 80073fa:	d1f7      	bne.n	80073ec <_fwalk_sglue+0xc>
 80073fc:	4630      	mov	r0, r6
 80073fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d907      	bls.n	8007418 <_fwalk_sglue+0x38>
 8007408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800740c:	3301      	adds	r3, #1
 800740e:	d003      	beq.n	8007418 <_fwalk_sglue+0x38>
 8007410:	4629      	mov	r1, r5
 8007412:	4638      	mov	r0, r7
 8007414:	47c0      	blx	r8
 8007416:	4306      	orrs	r6, r0
 8007418:	3568      	adds	r5, #104	@ 0x68
 800741a:	e7e9      	b.n	80073f0 <_fwalk_sglue+0x10>

0800741c <iprintf>:
 800741c:	b40f      	push	{r0, r1, r2, r3}
 800741e:	b507      	push	{r0, r1, r2, lr}
 8007420:	4906      	ldr	r1, [pc, #24]	@ (800743c <iprintf+0x20>)
 8007422:	ab04      	add	r3, sp, #16
 8007424:	6808      	ldr	r0, [r1, #0]
 8007426:	f853 2b04 	ldr.w	r2, [r3], #4
 800742a:	6881      	ldr	r1, [r0, #8]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	f000 fc61 	bl	8007cf4 <_vfiprintf_r>
 8007432:	b003      	add	sp, #12
 8007434:	f85d eb04 	ldr.w	lr, [sp], #4
 8007438:	b004      	add	sp, #16
 800743a:	4770      	bx	lr
 800743c:	20000164 	.word	0x20000164

08007440 <_puts_r>:
 8007440:	6a03      	ldr	r3, [r0, #32]
 8007442:	b570      	push	{r4, r5, r6, lr}
 8007444:	6884      	ldr	r4, [r0, #8]
 8007446:	4605      	mov	r5, r0
 8007448:	460e      	mov	r6, r1
 800744a:	b90b      	cbnz	r3, 8007450 <_puts_r+0x10>
 800744c:	f7ff ffb0 	bl	80073b0 <__sinit>
 8007450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d405      	bmi.n	8007462 <_puts_r+0x22>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0598      	lsls	r0, r3, #22
 800745a:	d402      	bmi.n	8007462 <_puts_r+0x22>
 800745c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800745e:	f000 f9be 	bl	80077de <__retarget_lock_acquire_recursive>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	0719      	lsls	r1, r3, #28
 8007466:	d502      	bpl.n	800746e <_puts_r+0x2e>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d135      	bne.n	80074da <_puts_r+0x9a>
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f8e5 	bl	8007640 <__swsetup_r>
 8007476:	b380      	cbz	r0, 80074da <_puts_r+0x9a>
 8007478:	f04f 35ff 	mov.w	r5, #4294967295
 800747c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800747e:	07da      	lsls	r2, r3, #31
 8007480:	d405      	bmi.n	800748e <_puts_r+0x4e>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	059b      	lsls	r3, r3, #22
 8007486:	d402      	bmi.n	800748e <_puts_r+0x4e>
 8007488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748a:	f000 f9a9 	bl	80077e0 <__retarget_lock_release_recursive>
 800748e:	4628      	mov	r0, r5
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	2b00      	cmp	r3, #0
 8007494:	da04      	bge.n	80074a0 <_puts_r+0x60>
 8007496:	69a2      	ldr	r2, [r4, #24]
 8007498:	429a      	cmp	r2, r3
 800749a:	dc17      	bgt.n	80074cc <_puts_r+0x8c>
 800749c:	290a      	cmp	r1, #10
 800749e:	d015      	beq.n	80074cc <_puts_r+0x8c>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	6022      	str	r2, [r4, #0]
 80074a6:	7019      	strb	r1, [r3, #0]
 80074a8:	68a3      	ldr	r3, [r4, #8]
 80074aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074ae:	3b01      	subs	r3, #1
 80074b0:	60a3      	str	r3, [r4, #8]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d1ed      	bne.n	8007492 <_puts_r+0x52>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da11      	bge.n	80074de <_puts_r+0x9e>
 80074ba:	4622      	mov	r2, r4
 80074bc:	210a      	movs	r1, #10
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f87f 	bl	80075c2 <__swbuf_r>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d0d7      	beq.n	8007478 <_puts_r+0x38>
 80074c8:	250a      	movs	r5, #10
 80074ca:	e7d7      	b.n	800747c <_puts_r+0x3c>
 80074cc:	4622      	mov	r2, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f877 	bl	80075c2 <__swbuf_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1e7      	bne.n	80074a8 <_puts_r+0x68>
 80074d8:	e7ce      	b.n	8007478 <_puts_r+0x38>
 80074da:	3e01      	subs	r6, #1
 80074dc:	e7e4      	b.n	80074a8 <_puts_r+0x68>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	220a      	movs	r2, #10
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	e7ee      	b.n	80074c8 <_puts_r+0x88>
	...

080074ec <puts>:
 80074ec:	4b02      	ldr	r3, [pc, #8]	@ (80074f8 <puts+0xc>)
 80074ee:	4601      	mov	r1, r0
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f7ff bfa5 	b.w	8007440 <_puts_r>
 80074f6:	bf00      	nop
 80074f8:	20000164 	.word	0x20000164

080074fc <siprintf>:
 80074fc:	b40e      	push	{r1, r2, r3}
 80074fe:	b500      	push	{lr}
 8007500:	b09c      	sub	sp, #112	@ 0x70
 8007502:	ab1d      	add	r3, sp, #116	@ 0x74
 8007504:	9002      	str	r0, [sp, #8]
 8007506:	9006      	str	r0, [sp, #24]
 8007508:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800750c:	4809      	ldr	r0, [pc, #36]	@ (8007534 <siprintf+0x38>)
 800750e:	9107      	str	r1, [sp, #28]
 8007510:	9104      	str	r1, [sp, #16]
 8007512:	4909      	ldr	r1, [pc, #36]	@ (8007538 <siprintf+0x3c>)
 8007514:	f853 2b04 	ldr.w	r2, [r3], #4
 8007518:	9105      	str	r1, [sp, #20]
 800751a:	6800      	ldr	r0, [r0, #0]
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	a902      	add	r1, sp, #8
 8007520:	f000 fac2 	bl	8007aa8 <_svfiprintf_r>
 8007524:	9b02      	ldr	r3, [sp, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	b01c      	add	sp, #112	@ 0x70
 800752c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007530:	b003      	add	sp, #12
 8007532:	4770      	bx	lr
 8007534:	20000164 	.word	0x20000164
 8007538:	ffff0208 	.word	0xffff0208

0800753c <__sread>:
 800753c:	b510      	push	{r4, lr}
 800753e:	460c      	mov	r4, r1
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	f000 f8fc 	bl	8007740 <_read_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	bfab      	itete	ge
 800754c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800754e:	89a3      	ldrhlt	r3, [r4, #12]
 8007550:	181b      	addge	r3, r3, r0
 8007552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007556:	bfac      	ite	ge
 8007558:	6563      	strge	r3, [r4, #84]	@ 0x54
 800755a:	81a3      	strhlt	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__swrite>:
 800755e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007562:	461f      	mov	r7, r3
 8007564:	898b      	ldrh	r3, [r1, #12]
 8007566:	05db      	lsls	r3, r3, #23
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	4616      	mov	r6, r2
 800756e:	d505      	bpl.n	800757c <__swrite+0x1e>
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	2302      	movs	r3, #2
 8007576:	2200      	movs	r2, #0
 8007578:	f000 f8d0 	bl	800771c <_lseek_r>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007586:	81a3      	strh	r3, [r4, #12]
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	4628      	mov	r0, r5
 800758e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	f000 b8e7 	b.w	8007764 <_write_r>

08007596 <__sseek>:
 8007596:	b510      	push	{r4, lr}
 8007598:	460c      	mov	r4, r1
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 f8bd 	bl	800771c <_lseek_r>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	bf15      	itete	ne
 80075a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075b2:	81a3      	strheq	r3, [r4, #12]
 80075b4:	bf18      	it	ne
 80075b6:	81a3      	strhne	r3, [r4, #12]
 80075b8:	bd10      	pop	{r4, pc}

080075ba <__sclose>:
 80075ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075be:	f000 b89d 	b.w	80076fc <_close_r>

080075c2 <__swbuf_r>:
 80075c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c4:	460e      	mov	r6, r1
 80075c6:	4614      	mov	r4, r2
 80075c8:	4605      	mov	r5, r0
 80075ca:	b118      	cbz	r0, 80075d4 <__swbuf_r+0x12>
 80075cc:	6a03      	ldr	r3, [r0, #32]
 80075ce:	b90b      	cbnz	r3, 80075d4 <__swbuf_r+0x12>
 80075d0:	f7ff feee 	bl	80073b0 <__sinit>
 80075d4:	69a3      	ldr	r3, [r4, #24]
 80075d6:	60a3      	str	r3, [r4, #8]
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	071a      	lsls	r2, r3, #28
 80075dc:	d501      	bpl.n	80075e2 <__swbuf_r+0x20>
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	b943      	cbnz	r3, 80075f4 <__swbuf_r+0x32>
 80075e2:	4621      	mov	r1, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 f82b 	bl	8007640 <__swsetup_r>
 80075ea:	b118      	cbz	r0, 80075f4 <__swbuf_r+0x32>
 80075ec:	f04f 37ff 	mov.w	r7, #4294967295
 80075f0:	4638      	mov	r0, r7
 80075f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	6922      	ldr	r2, [r4, #16]
 80075f8:	1a98      	subs	r0, r3, r2
 80075fa:	6963      	ldr	r3, [r4, #20]
 80075fc:	b2f6      	uxtb	r6, r6
 80075fe:	4283      	cmp	r3, r0
 8007600:	4637      	mov	r7, r6
 8007602:	dc05      	bgt.n	8007610 <__swbuf_r+0x4e>
 8007604:	4621      	mov	r1, r4
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fe9e 	bl	8008348 <_fflush_r>
 800760c:	2800      	cmp	r0, #0
 800760e:	d1ed      	bne.n	80075ec <__swbuf_r+0x2a>
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	3b01      	subs	r3, #1
 8007614:	60a3      	str	r3, [r4, #8]
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	6022      	str	r2, [r4, #0]
 800761c:	701e      	strb	r6, [r3, #0]
 800761e:	6962      	ldr	r2, [r4, #20]
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	429a      	cmp	r2, r3
 8007624:	d004      	beq.n	8007630 <__swbuf_r+0x6e>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	07db      	lsls	r3, r3, #31
 800762a:	d5e1      	bpl.n	80075f0 <__swbuf_r+0x2e>
 800762c:	2e0a      	cmp	r6, #10
 800762e:	d1df      	bne.n	80075f0 <__swbuf_r+0x2e>
 8007630:	4621      	mov	r1, r4
 8007632:	4628      	mov	r0, r5
 8007634:	f000 fe88 	bl	8008348 <_fflush_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	d0d9      	beq.n	80075f0 <__swbuf_r+0x2e>
 800763c:	e7d6      	b.n	80075ec <__swbuf_r+0x2a>
	...

08007640 <__swsetup_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4b29      	ldr	r3, [pc, #164]	@ (80076e8 <__swsetup_r+0xa8>)
 8007644:	4605      	mov	r5, r0
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	460c      	mov	r4, r1
 800764a:	b118      	cbz	r0, 8007654 <__swsetup_r+0x14>
 800764c:	6a03      	ldr	r3, [r0, #32]
 800764e:	b90b      	cbnz	r3, 8007654 <__swsetup_r+0x14>
 8007650:	f7ff feae 	bl	80073b0 <__sinit>
 8007654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007658:	0719      	lsls	r1, r3, #28
 800765a:	d422      	bmi.n	80076a2 <__swsetup_r+0x62>
 800765c:	06da      	lsls	r2, r3, #27
 800765e:	d407      	bmi.n	8007670 <__swsetup_r+0x30>
 8007660:	2209      	movs	r2, #9
 8007662:	602a      	str	r2, [r5, #0]
 8007664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	e033      	b.n	80076d8 <__swsetup_r+0x98>
 8007670:	0758      	lsls	r0, r3, #29
 8007672:	d512      	bpl.n	800769a <__swsetup_r+0x5a>
 8007674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007676:	b141      	cbz	r1, 800768a <__swsetup_r+0x4a>
 8007678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800767c:	4299      	cmp	r1, r3
 800767e:	d002      	beq.n	8007686 <__swsetup_r+0x46>
 8007680:	4628      	mov	r0, r5
 8007682:	f000 f8bd 	bl	8007800 <_free_r>
 8007686:	2300      	movs	r3, #0
 8007688:	6363      	str	r3, [r4, #52]	@ 0x34
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	2300      	movs	r3, #0
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f043 0308 	orr.w	r3, r3, #8
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	b94b      	cbnz	r3, 80076ba <__swsetup_r+0x7a>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b0:	d003      	beq.n	80076ba <__swsetup_r+0x7a>
 80076b2:	4621      	mov	r1, r4
 80076b4:	4628      	mov	r0, r5
 80076b6:	f000 fe95 	bl	80083e4 <__smakebuf_r>
 80076ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076be:	f013 0201 	ands.w	r2, r3, #1
 80076c2:	d00a      	beq.n	80076da <__swsetup_r+0x9a>
 80076c4:	2200      	movs	r2, #0
 80076c6:	60a2      	str	r2, [r4, #8]
 80076c8:	6962      	ldr	r2, [r4, #20]
 80076ca:	4252      	negs	r2, r2
 80076cc:	61a2      	str	r2, [r4, #24]
 80076ce:	6922      	ldr	r2, [r4, #16]
 80076d0:	b942      	cbnz	r2, 80076e4 <__swsetup_r+0xa4>
 80076d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076d6:	d1c5      	bne.n	8007664 <__swsetup_r+0x24>
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
 80076da:	0799      	lsls	r1, r3, #30
 80076dc:	bf58      	it	pl
 80076de:	6962      	ldrpl	r2, [r4, #20]
 80076e0:	60a2      	str	r2, [r4, #8]
 80076e2:	e7f4      	b.n	80076ce <__swsetup_r+0x8e>
 80076e4:	2000      	movs	r0, #0
 80076e6:	e7f7      	b.n	80076d8 <__swsetup_r+0x98>
 80076e8:	20000164 	.word	0x20000164

080076ec <memset>:
 80076ec:	4402      	add	r2, r0
 80076ee:	4603      	mov	r3, r0
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d100      	bne.n	80076f6 <memset+0xa>
 80076f4:	4770      	bx	lr
 80076f6:	f803 1b01 	strb.w	r1, [r3], #1
 80076fa:	e7f9      	b.n	80076f0 <memset+0x4>

080076fc <_close_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	@ (8007718 <_close_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7f9 fc23 	bl	8000f52 <_close>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_close_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_close_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20000a94 	.word	0x20000a94

0800771c <_lseek_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	@ (800773c <_lseek_r+0x20>)
 8007720:	4604      	mov	r4, r0
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	2200      	movs	r2, #0
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7f9 fc38 	bl	8000fa0 <_lseek>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_lseek_r+0x1e>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_lseek_r+0x1e>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20000a94 	.word	0x20000a94

08007740 <_read_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d07      	ldr	r5, [pc, #28]	@ (8007760 <_read_r+0x20>)
 8007744:	4604      	mov	r4, r0
 8007746:	4608      	mov	r0, r1
 8007748:	4611      	mov	r1, r2
 800774a:	2200      	movs	r2, #0
 800774c:	602a      	str	r2, [r5, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	f7f9 fbc6 	bl	8000ee0 <_read>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_read_r+0x1e>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_read_r+0x1e>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	20000a94 	.word	0x20000a94

08007764 <_write_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d07      	ldr	r5, [pc, #28]	@ (8007784 <_write_r+0x20>)
 8007768:	4604      	mov	r4, r0
 800776a:	4608      	mov	r0, r1
 800776c:	4611      	mov	r1, r2
 800776e:	2200      	movs	r2, #0
 8007770:	602a      	str	r2, [r5, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	f7f9 fbd1 	bl	8000f1a <_write>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_write_r+0x1e>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	b103      	cbz	r3, 8007782 <_write_r+0x1e>
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20000a94 	.word	0x20000a94

08007788 <__errno>:
 8007788:	4b01      	ldr	r3, [pc, #4]	@ (8007790 <__errno+0x8>)
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000164 	.word	0x20000164

08007794 <__libc_init_array>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4d0d      	ldr	r5, [pc, #52]	@ (80077cc <__libc_init_array+0x38>)
 8007798:	4c0d      	ldr	r4, [pc, #52]	@ (80077d0 <__libc_init_array+0x3c>)
 800779a:	1b64      	subs	r4, r4, r5
 800779c:	10a4      	asrs	r4, r4, #2
 800779e:	2600      	movs	r6, #0
 80077a0:	42a6      	cmp	r6, r4
 80077a2:	d109      	bne.n	80077b8 <__libc_init_array+0x24>
 80077a4:	4d0b      	ldr	r5, [pc, #44]	@ (80077d4 <__libc_init_array+0x40>)
 80077a6:	4c0c      	ldr	r4, [pc, #48]	@ (80077d8 <__libc_init_array+0x44>)
 80077a8:	f000 feda 	bl	8008560 <_init>
 80077ac:	1b64      	subs	r4, r4, r5
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	2600      	movs	r6, #0
 80077b2:	42a6      	cmp	r6, r4
 80077b4:	d105      	bne.n	80077c2 <__libc_init_array+0x2e>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077bc:	4798      	blx	r3
 80077be:	3601      	adds	r6, #1
 80077c0:	e7ee      	b.n	80077a0 <__libc_init_array+0xc>
 80077c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c6:	4798      	blx	r3
 80077c8:	3601      	adds	r6, #1
 80077ca:	e7f2      	b.n	80077b2 <__libc_init_array+0x1e>
 80077cc:	08008e44 	.word	0x08008e44
 80077d0:	08008e44 	.word	0x08008e44
 80077d4:	08008e44 	.word	0x08008e44
 80077d8:	08008e48 	.word	0x08008e48

080077dc <__retarget_lock_init_recursive>:
 80077dc:	4770      	bx	lr

080077de <__retarget_lock_acquire_recursive>:
 80077de:	4770      	bx	lr

080077e0 <__retarget_lock_release_recursive>:
 80077e0:	4770      	bx	lr

080077e2 <memcpy>:
 80077e2:	440a      	add	r2, r1
 80077e4:	4291      	cmp	r1, r2
 80077e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ea:	d100      	bne.n	80077ee <memcpy+0xc>
 80077ec:	4770      	bx	lr
 80077ee:	b510      	push	{r4, lr}
 80077f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f8:	4291      	cmp	r1, r2
 80077fa:	d1f9      	bne.n	80077f0 <memcpy+0xe>
 80077fc:	bd10      	pop	{r4, pc}
	...

08007800 <_free_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4605      	mov	r5, r0
 8007804:	2900      	cmp	r1, #0
 8007806:	d041      	beq.n	800788c <_free_r+0x8c>
 8007808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780c:	1f0c      	subs	r4, r1, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfb8      	it	lt
 8007812:	18e4      	addlt	r4, r4, r3
 8007814:	f000 f8e0 	bl	80079d8 <__malloc_lock>
 8007818:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <_free_r+0x90>)
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	b933      	cbnz	r3, 800782c <_free_r+0x2c>
 800781e:	6063      	str	r3, [r4, #4]
 8007820:	6014      	str	r4, [r2, #0]
 8007822:	4628      	mov	r0, r5
 8007824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007828:	f000 b8dc 	b.w	80079e4 <__malloc_unlock>
 800782c:	42a3      	cmp	r3, r4
 800782e:	d908      	bls.n	8007842 <_free_r+0x42>
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	1821      	adds	r1, r4, r0
 8007834:	428b      	cmp	r3, r1
 8007836:	bf01      	itttt	eq
 8007838:	6819      	ldreq	r1, [r3, #0]
 800783a:	685b      	ldreq	r3, [r3, #4]
 800783c:	1809      	addeq	r1, r1, r0
 800783e:	6021      	streq	r1, [r4, #0]
 8007840:	e7ed      	b.n	800781e <_free_r+0x1e>
 8007842:	461a      	mov	r2, r3
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	b10b      	cbz	r3, 800784c <_free_r+0x4c>
 8007848:	42a3      	cmp	r3, r4
 800784a:	d9fa      	bls.n	8007842 <_free_r+0x42>
 800784c:	6811      	ldr	r1, [r2, #0]
 800784e:	1850      	adds	r0, r2, r1
 8007850:	42a0      	cmp	r0, r4
 8007852:	d10b      	bne.n	800786c <_free_r+0x6c>
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	4401      	add	r1, r0
 8007858:	1850      	adds	r0, r2, r1
 800785a:	4283      	cmp	r3, r0
 800785c:	6011      	str	r1, [r2, #0]
 800785e:	d1e0      	bne.n	8007822 <_free_r+0x22>
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	6053      	str	r3, [r2, #4]
 8007866:	4408      	add	r0, r1
 8007868:	6010      	str	r0, [r2, #0]
 800786a:	e7da      	b.n	8007822 <_free_r+0x22>
 800786c:	d902      	bls.n	8007874 <_free_r+0x74>
 800786e:	230c      	movs	r3, #12
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	e7d6      	b.n	8007822 <_free_r+0x22>
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	1821      	adds	r1, r4, r0
 8007878:	428b      	cmp	r3, r1
 800787a:	bf04      	itt	eq
 800787c:	6819      	ldreq	r1, [r3, #0]
 800787e:	685b      	ldreq	r3, [r3, #4]
 8007880:	6063      	str	r3, [r4, #4]
 8007882:	bf04      	itt	eq
 8007884:	1809      	addeq	r1, r1, r0
 8007886:	6021      	streq	r1, [r4, #0]
 8007888:	6054      	str	r4, [r2, #4]
 800788a:	e7ca      	b.n	8007822 <_free_r+0x22>
 800788c:	bd38      	pop	{r3, r4, r5, pc}
 800788e:	bf00      	nop
 8007890:	20000aa0 	.word	0x20000aa0

08007894 <sbrk_aligned>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	4e0f      	ldr	r6, [pc, #60]	@ (80078d4 <sbrk_aligned+0x40>)
 8007898:	460c      	mov	r4, r1
 800789a:	6831      	ldr	r1, [r6, #0]
 800789c:	4605      	mov	r5, r0
 800789e:	b911      	cbnz	r1, 80078a6 <sbrk_aligned+0x12>
 80078a0:	f000 fe18 	bl	80084d4 <_sbrk_r>
 80078a4:	6030      	str	r0, [r6, #0]
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 fe13 	bl	80084d4 <_sbrk_r>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	d103      	bne.n	80078ba <sbrk_aligned+0x26>
 80078b2:	f04f 34ff 	mov.w	r4, #4294967295
 80078b6:	4620      	mov	r0, r4
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	1cc4      	adds	r4, r0, #3
 80078bc:	f024 0403 	bic.w	r4, r4, #3
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d0f8      	beq.n	80078b6 <sbrk_aligned+0x22>
 80078c4:	1a21      	subs	r1, r4, r0
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fe04 	bl	80084d4 <_sbrk_r>
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1f2      	bne.n	80078b6 <sbrk_aligned+0x22>
 80078d0:	e7ef      	b.n	80078b2 <sbrk_aligned+0x1e>
 80078d2:	bf00      	nop
 80078d4:	20000a9c 	.word	0x20000a9c

080078d8 <_malloc_r>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	1ccd      	adds	r5, r1, #3
 80078de:	f025 0503 	bic.w	r5, r5, #3
 80078e2:	3508      	adds	r5, #8
 80078e4:	2d0c      	cmp	r5, #12
 80078e6:	bf38      	it	cc
 80078e8:	250c      	movcc	r5, #12
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	4606      	mov	r6, r0
 80078ee:	db01      	blt.n	80078f4 <_malloc_r+0x1c>
 80078f0:	42a9      	cmp	r1, r5
 80078f2:	d904      	bls.n	80078fe <_malloc_r+0x26>
 80078f4:	230c      	movs	r3, #12
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	2000      	movs	r0, #0
 80078fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079d4 <_malloc_r+0xfc>
 8007902:	f000 f869 	bl	80079d8 <__malloc_lock>
 8007906:	f8d8 3000 	ldr.w	r3, [r8]
 800790a:	461c      	mov	r4, r3
 800790c:	bb44      	cbnz	r4, 8007960 <_malloc_r+0x88>
 800790e:	4629      	mov	r1, r5
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff ffbf 	bl	8007894 <sbrk_aligned>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	4604      	mov	r4, r0
 800791a:	d158      	bne.n	80079ce <_malloc_r+0xf6>
 800791c:	f8d8 4000 	ldr.w	r4, [r8]
 8007920:	4627      	mov	r7, r4
 8007922:	2f00      	cmp	r7, #0
 8007924:	d143      	bne.n	80079ae <_malloc_r+0xd6>
 8007926:	2c00      	cmp	r4, #0
 8007928:	d04b      	beq.n	80079c2 <_malloc_r+0xea>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	4639      	mov	r1, r7
 800792e:	4630      	mov	r0, r6
 8007930:	eb04 0903 	add.w	r9, r4, r3
 8007934:	f000 fdce 	bl	80084d4 <_sbrk_r>
 8007938:	4581      	cmp	r9, r0
 800793a:	d142      	bne.n	80079c2 <_malloc_r+0xea>
 800793c:	6821      	ldr	r1, [r4, #0]
 800793e:	1a6d      	subs	r5, r5, r1
 8007940:	4629      	mov	r1, r5
 8007942:	4630      	mov	r0, r6
 8007944:	f7ff ffa6 	bl	8007894 <sbrk_aligned>
 8007948:	3001      	adds	r0, #1
 800794a:	d03a      	beq.n	80079c2 <_malloc_r+0xea>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	442b      	add	r3, r5
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	f8d8 3000 	ldr.w	r3, [r8]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	bb62      	cbnz	r2, 80079b4 <_malloc_r+0xdc>
 800795a:	f8c8 7000 	str.w	r7, [r8]
 800795e:	e00f      	b.n	8007980 <_malloc_r+0xa8>
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	1b52      	subs	r2, r2, r5
 8007964:	d420      	bmi.n	80079a8 <_malloc_r+0xd0>
 8007966:	2a0b      	cmp	r2, #11
 8007968:	d917      	bls.n	800799a <_malloc_r+0xc2>
 800796a:	1961      	adds	r1, r4, r5
 800796c:	42a3      	cmp	r3, r4
 800796e:	6025      	str	r5, [r4, #0]
 8007970:	bf18      	it	ne
 8007972:	6059      	strne	r1, [r3, #4]
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	bf08      	it	eq
 8007978:	f8c8 1000 	streq.w	r1, [r8]
 800797c:	5162      	str	r2, [r4, r5]
 800797e:	604b      	str	r3, [r1, #4]
 8007980:	4630      	mov	r0, r6
 8007982:	f000 f82f 	bl	80079e4 <__malloc_unlock>
 8007986:	f104 000b 	add.w	r0, r4, #11
 800798a:	1d23      	adds	r3, r4, #4
 800798c:	f020 0007 	bic.w	r0, r0, #7
 8007990:	1ac2      	subs	r2, r0, r3
 8007992:	bf1c      	itt	ne
 8007994:	1a1b      	subne	r3, r3, r0
 8007996:	50a3      	strne	r3, [r4, r2]
 8007998:	e7af      	b.n	80078fa <_malloc_r+0x22>
 800799a:	6862      	ldr	r2, [r4, #4]
 800799c:	42a3      	cmp	r3, r4
 800799e:	bf0c      	ite	eq
 80079a0:	f8c8 2000 	streq.w	r2, [r8]
 80079a4:	605a      	strne	r2, [r3, #4]
 80079a6:	e7eb      	b.n	8007980 <_malloc_r+0xa8>
 80079a8:	4623      	mov	r3, r4
 80079aa:	6864      	ldr	r4, [r4, #4]
 80079ac:	e7ae      	b.n	800790c <_malloc_r+0x34>
 80079ae:	463c      	mov	r4, r7
 80079b0:	687f      	ldr	r7, [r7, #4]
 80079b2:	e7b6      	b.n	8007922 <_malloc_r+0x4a>
 80079b4:	461a      	mov	r2, r3
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d1fb      	bne.n	80079b4 <_malloc_r+0xdc>
 80079bc:	2300      	movs	r3, #0
 80079be:	6053      	str	r3, [r2, #4]
 80079c0:	e7de      	b.n	8007980 <_malloc_r+0xa8>
 80079c2:	230c      	movs	r3, #12
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f80c 	bl	80079e4 <__malloc_unlock>
 80079cc:	e794      	b.n	80078f8 <_malloc_r+0x20>
 80079ce:	6005      	str	r5, [r0, #0]
 80079d0:	e7d6      	b.n	8007980 <_malloc_r+0xa8>
 80079d2:	bf00      	nop
 80079d4:	20000aa0 	.word	0x20000aa0

080079d8 <__malloc_lock>:
 80079d8:	4801      	ldr	r0, [pc, #4]	@ (80079e0 <__malloc_lock+0x8>)
 80079da:	f7ff bf00 	b.w	80077de <__retarget_lock_acquire_recursive>
 80079de:	bf00      	nop
 80079e0:	20000a98 	.word	0x20000a98

080079e4 <__malloc_unlock>:
 80079e4:	4801      	ldr	r0, [pc, #4]	@ (80079ec <__malloc_unlock+0x8>)
 80079e6:	f7ff befb 	b.w	80077e0 <__retarget_lock_release_recursive>
 80079ea:	bf00      	nop
 80079ec:	20000a98 	.word	0x20000a98

080079f0 <__ssputs_r>:
 80079f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f4:	688e      	ldr	r6, [r1, #8]
 80079f6:	461f      	mov	r7, r3
 80079f8:	42be      	cmp	r6, r7
 80079fa:	680b      	ldr	r3, [r1, #0]
 80079fc:	4682      	mov	sl, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	4690      	mov	r8, r2
 8007a02:	d82d      	bhi.n	8007a60 <__ssputs_r+0x70>
 8007a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a0c:	d026      	beq.n	8007a5c <__ssputs_r+0x6c>
 8007a0e:	6965      	ldr	r5, [r4, #20]
 8007a10:	6909      	ldr	r1, [r1, #16]
 8007a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a16:	eba3 0901 	sub.w	r9, r3, r1
 8007a1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a1e:	1c7b      	adds	r3, r7, #1
 8007a20:	444b      	add	r3, r9
 8007a22:	106d      	asrs	r5, r5, #1
 8007a24:	429d      	cmp	r5, r3
 8007a26:	bf38      	it	cc
 8007a28:	461d      	movcc	r5, r3
 8007a2a:	0553      	lsls	r3, r2, #21
 8007a2c:	d527      	bpl.n	8007a7e <__ssputs_r+0x8e>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7ff ff52 	bl	80078d8 <_malloc_r>
 8007a34:	4606      	mov	r6, r0
 8007a36:	b360      	cbz	r0, 8007a92 <__ssputs_r+0xa2>
 8007a38:	6921      	ldr	r1, [r4, #16]
 8007a3a:	464a      	mov	r2, r9
 8007a3c:	f7ff fed1 	bl	80077e2 <memcpy>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	6126      	str	r6, [r4, #16]
 8007a4e:	6165      	str	r5, [r4, #20]
 8007a50:	444e      	add	r6, r9
 8007a52:	eba5 0509 	sub.w	r5, r5, r9
 8007a56:	6026      	str	r6, [r4, #0]
 8007a58:	60a5      	str	r5, [r4, #8]
 8007a5a:	463e      	mov	r6, r7
 8007a5c:	42be      	cmp	r6, r7
 8007a5e:	d900      	bls.n	8007a62 <__ssputs_r+0x72>
 8007a60:	463e      	mov	r6, r7
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	4632      	mov	r2, r6
 8007a66:	4641      	mov	r1, r8
 8007a68:	f000 fcf8 	bl	800845c <memmove>
 8007a6c:	68a3      	ldr	r3, [r4, #8]
 8007a6e:	1b9b      	subs	r3, r3, r6
 8007a70:	60a3      	str	r3, [r4, #8]
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	4433      	add	r3, r6
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	462a      	mov	r2, r5
 8007a80:	f000 fd38 	bl	80084f4 <_realloc_r>
 8007a84:	4606      	mov	r6, r0
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d1e0      	bne.n	8007a4c <__ssputs_r+0x5c>
 8007a8a:	6921      	ldr	r1, [r4, #16]
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	f7ff feb7 	bl	8007800 <_free_r>
 8007a92:	230c      	movs	r3, #12
 8007a94:	f8ca 3000 	str.w	r3, [sl]
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	e7e9      	b.n	8007a7a <__ssputs_r+0x8a>
	...

08007aa8 <_svfiprintf_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4698      	mov	r8, r3
 8007aae:	898b      	ldrh	r3, [r1, #12]
 8007ab0:	061b      	lsls	r3, r3, #24
 8007ab2:	b09d      	sub	sp, #116	@ 0x74
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	4614      	mov	r4, r2
 8007aba:	d510      	bpl.n	8007ade <_svfiprintf_r+0x36>
 8007abc:	690b      	ldr	r3, [r1, #16]
 8007abe:	b973      	cbnz	r3, 8007ade <_svfiprintf_r+0x36>
 8007ac0:	2140      	movs	r1, #64	@ 0x40
 8007ac2:	f7ff ff09 	bl	80078d8 <_malloc_r>
 8007ac6:	6028      	str	r0, [r5, #0]
 8007ac8:	6128      	str	r0, [r5, #16]
 8007aca:	b930      	cbnz	r0, 8007ada <_svfiprintf_r+0x32>
 8007acc:	230c      	movs	r3, #12
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	b01d      	add	sp, #116	@ 0x74
 8007ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ada:	2340      	movs	r3, #64	@ 0x40
 8007adc:	616b      	str	r3, [r5, #20]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae2:	2320      	movs	r3, #32
 8007ae4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aec:	2330      	movs	r3, #48	@ 0x30
 8007aee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c8c <_svfiprintf_r+0x1e4>
 8007af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007af6:	f04f 0901 	mov.w	r9, #1
 8007afa:	4623      	mov	r3, r4
 8007afc:	469a      	mov	sl, r3
 8007afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b02:	b10a      	cbz	r2, 8007b08 <_svfiprintf_r+0x60>
 8007b04:	2a25      	cmp	r2, #37	@ 0x25
 8007b06:	d1f9      	bne.n	8007afc <_svfiprintf_r+0x54>
 8007b08:	ebba 0b04 	subs.w	fp, sl, r4
 8007b0c:	d00b      	beq.n	8007b26 <_svfiprintf_r+0x7e>
 8007b0e:	465b      	mov	r3, fp
 8007b10:	4622      	mov	r2, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	4638      	mov	r0, r7
 8007b16:	f7ff ff6b 	bl	80079f0 <__ssputs_r>
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f000 80a7 	beq.w	8007c6e <_svfiprintf_r+0x1c6>
 8007b20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b22:	445a      	add	r2, fp
 8007b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b26:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 809f 	beq.w	8007c6e <_svfiprintf_r+0x1c6>
 8007b30:	2300      	movs	r3, #0
 8007b32:	f04f 32ff 	mov.w	r2, #4294967295
 8007b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b3a:	f10a 0a01 	add.w	sl, sl, #1
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	9307      	str	r3, [sp, #28]
 8007b42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b46:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b48:	4654      	mov	r4, sl
 8007b4a:	2205      	movs	r2, #5
 8007b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b50:	484e      	ldr	r0, [pc, #312]	@ (8007c8c <_svfiprintf_r+0x1e4>)
 8007b52:	f7f8 fb3d 	bl	80001d0 <memchr>
 8007b56:	9a04      	ldr	r2, [sp, #16]
 8007b58:	b9d8      	cbnz	r0, 8007b92 <_svfiprintf_r+0xea>
 8007b5a:	06d0      	lsls	r0, r2, #27
 8007b5c:	bf44      	itt	mi
 8007b5e:	2320      	movmi	r3, #32
 8007b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b64:	0711      	lsls	r1, r2, #28
 8007b66:	bf44      	itt	mi
 8007b68:	232b      	movmi	r3, #43	@ 0x2b
 8007b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b74:	d015      	beq.n	8007ba2 <_svfiprintf_r+0xfa>
 8007b76:	9a07      	ldr	r2, [sp, #28]
 8007b78:	4654      	mov	r4, sl
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f04f 0c0a 	mov.w	ip, #10
 8007b80:	4621      	mov	r1, r4
 8007b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b86:	3b30      	subs	r3, #48	@ 0x30
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	d94b      	bls.n	8007c24 <_svfiprintf_r+0x17c>
 8007b8c:	b1b0      	cbz	r0, 8007bbc <_svfiprintf_r+0x114>
 8007b8e:	9207      	str	r2, [sp, #28]
 8007b90:	e014      	b.n	8007bbc <_svfiprintf_r+0x114>
 8007b92:	eba0 0308 	sub.w	r3, r0, r8
 8007b96:	fa09 f303 	lsl.w	r3, r9, r3
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	46a2      	mov	sl, r4
 8007ba0:	e7d2      	b.n	8007b48 <_svfiprintf_r+0xa0>
 8007ba2:	9b03      	ldr	r3, [sp, #12]
 8007ba4:	1d19      	adds	r1, r3, #4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	9103      	str	r1, [sp, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bfbb      	ittet	lt
 8007bae:	425b      	neglt	r3, r3
 8007bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb4:	9307      	strge	r3, [sp, #28]
 8007bb6:	9307      	strlt	r3, [sp, #28]
 8007bb8:	bfb8      	it	lt
 8007bba:	9204      	strlt	r2, [sp, #16]
 8007bbc:	7823      	ldrb	r3, [r4, #0]
 8007bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bc0:	d10a      	bne.n	8007bd8 <_svfiprintf_r+0x130>
 8007bc2:	7863      	ldrb	r3, [r4, #1]
 8007bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bc6:	d132      	bne.n	8007c2e <_svfiprintf_r+0x186>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	1d1a      	adds	r2, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9203      	str	r2, [sp, #12]
 8007bd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bd4:	3402      	adds	r4, #2
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c9c <_svfiprintf_r+0x1f4>
 8007bdc:	7821      	ldrb	r1, [r4, #0]
 8007bde:	2203      	movs	r2, #3
 8007be0:	4650      	mov	r0, sl
 8007be2:	f7f8 faf5 	bl	80001d0 <memchr>
 8007be6:	b138      	cbz	r0, 8007bf8 <_svfiprintf_r+0x150>
 8007be8:	9b04      	ldr	r3, [sp, #16]
 8007bea:	eba0 000a 	sub.w	r0, r0, sl
 8007bee:	2240      	movs	r2, #64	@ 0x40
 8007bf0:	4082      	lsls	r2, r0
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	4824      	ldr	r0, [pc, #144]	@ (8007c90 <_svfiprintf_r+0x1e8>)
 8007bfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c02:	2206      	movs	r2, #6
 8007c04:	f7f8 fae4 	bl	80001d0 <memchr>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d036      	beq.n	8007c7a <_svfiprintf_r+0x1d2>
 8007c0c:	4b21      	ldr	r3, [pc, #132]	@ (8007c94 <_svfiprintf_r+0x1ec>)
 8007c0e:	bb1b      	cbnz	r3, 8007c58 <_svfiprintf_r+0x1b0>
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	3307      	adds	r3, #7
 8007c14:	f023 0307 	bic.w	r3, r3, #7
 8007c18:	3308      	adds	r3, #8
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1e:	4433      	add	r3, r6
 8007c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c22:	e76a      	b.n	8007afa <_svfiprintf_r+0x52>
 8007c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c28:	460c      	mov	r4, r1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7a8      	b.n	8007b80 <_svfiprintf_r+0xd8>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	3401      	adds	r4, #1
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	4619      	mov	r1, r3
 8007c36:	f04f 0c0a 	mov.w	ip, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c40:	3a30      	subs	r2, #48	@ 0x30
 8007c42:	2a09      	cmp	r2, #9
 8007c44:	d903      	bls.n	8007c4e <_svfiprintf_r+0x1a6>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0c6      	beq.n	8007bd8 <_svfiprintf_r+0x130>
 8007c4a:	9105      	str	r1, [sp, #20]
 8007c4c:	e7c4      	b.n	8007bd8 <_svfiprintf_r+0x130>
 8007c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c52:	4604      	mov	r4, r0
 8007c54:	2301      	movs	r3, #1
 8007c56:	e7f0      	b.n	8007c3a <_svfiprintf_r+0x192>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <_svfiprintf_r+0x1f0>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4638      	mov	r0, r7
 8007c64:	f3af 8000 	nop.w
 8007c68:	1c42      	adds	r2, r0, #1
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	d1d6      	bne.n	8007c1c <_svfiprintf_r+0x174>
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	065b      	lsls	r3, r3, #25
 8007c72:	f53f af2d 	bmi.w	8007ad0 <_svfiprintf_r+0x28>
 8007c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c78:	e72c      	b.n	8007ad4 <_svfiprintf_r+0x2c>
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <_svfiprintf_r+0x1f0>)
 8007c82:	a904      	add	r1, sp, #16
 8007c84:	4638      	mov	r0, r7
 8007c86:	f000 f9bb 	bl	8008000 <_printf_i>
 8007c8a:	e7ed      	b.n	8007c68 <_svfiprintf_r+0x1c0>
 8007c8c:	08008e08 	.word	0x08008e08
 8007c90:	08008e12 	.word	0x08008e12
 8007c94:	00000000 	.word	0x00000000
 8007c98:	080079f1 	.word	0x080079f1
 8007c9c:	08008e0e 	.word	0x08008e0e

08007ca0 <__sfputc_r>:
 8007ca0:	6893      	ldr	r3, [r2, #8]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	b410      	push	{r4}
 8007ca8:	6093      	str	r3, [r2, #8]
 8007caa:	da08      	bge.n	8007cbe <__sfputc_r+0x1e>
 8007cac:	6994      	ldr	r4, [r2, #24]
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	db01      	blt.n	8007cb6 <__sfputc_r+0x16>
 8007cb2:	290a      	cmp	r1, #10
 8007cb4:	d103      	bne.n	8007cbe <__sfputc_r+0x1e>
 8007cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cba:	f7ff bc82 	b.w	80075c2 <__swbuf_r>
 8007cbe:	6813      	ldr	r3, [r2, #0]
 8007cc0:	1c58      	adds	r0, r3, #1
 8007cc2:	6010      	str	r0, [r2, #0]
 8007cc4:	7019      	strb	r1, [r3, #0]
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <__sfputs_r>:
 8007cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	18d5      	adds	r5, r2, r3
 8007cd8:	42ac      	cmp	r4, r5
 8007cda:	d101      	bne.n	8007ce0 <__sfputs_r+0x12>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e007      	b.n	8007cf0 <__sfputs_r+0x22>
 8007ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce4:	463a      	mov	r2, r7
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ffda 	bl	8007ca0 <__sfputc_r>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d1f3      	bne.n	8007cd8 <__sfputs_r+0xa>
 8007cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf4 <_vfiprintf_r>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	b09d      	sub	sp, #116	@ 0x74
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	4698      	mov	r8, r3
 8007d00:	4606      	mov	r6, r0
 8007d02:	b118      	cbz	r0, 8007d0c <_vfiprintf_r+0x18>
 8007d04:	6a03      	ldr	r3, [r0, #32]
 8007d06:	b90b      	cbnz	r3, 8007d0c <_vfiprintf_r+0x18>
 8007d08:	f7ff fb52 	bl	80073b0 <__sinit>
 8007d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d0e:	07d9      	lsls	r1, r3, #31
 8007d10:	d405      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	059a      	lsls	r2, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d1a:	f7ff fd60 	bl	80077de <__retarget_lock_acquire_recursive>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	d501      	bpl.n	8007d28 <_vfiprintf_r+0x34>
 8007d24:	692b      	ldr	r3, [r5, #16]
 8007d26:	b99b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x5c>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7ff fc88 	bl	8007640 <__swsetup_r>
 8007d30:	b170      	cbz	r0, 8007d50 <_vfiprintf_r+0x5c>
 8007d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d34:	07dc      	lsls	r4, r3, #31
 8007d36:	d504      	bpl.n	8007d42 <_vfiprintf_r+0x4e>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b01d      	add	sp, #116	@ 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	0598      	lsls	r0, r3, #22
 8007d46:	d4f7      	bmi.n	8007d38 <_vfiprintf_r+0x44>
 8007d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d4a:	f7ff fd49 	bl	80077e0 <__retarget_lock_release_recursive>
 8007d4e:	e7f3      	b.n	8007d38 <_vfiprintf_r+0x44>
 8007d50:	2300      	movs	r3, #0
 8007d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d54:	2320      	movs	r3, #32
 8007d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d5e:	2330      	movs	r3, #48	@ 0x30
 8007d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f10 <_vfiprintf_r+0x21c>
 8007d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d68:	f04f 0901 	mov.w	r9, #1
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	469a      	mov	sl, r3
 8007d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d74:	b10a      	cbz	r2, 8007d7a <_vfiprintf_r+0x86>
 8007d76:	2a25      	cmp	r2, #37	@ 0x25
 8007d78:	d1f9      	bne.n	8007d6e <_vfiprintf_r+0x7a>
 8007d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d7e:	d00b      	beq.n	8007d98 <_vfiprintf_r+0xa4>
 8007d80:	465b      	mov	r3, fp
 8007d82:	4622      	mov	r2, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff ffa1 	bl	8007cce <__sfputs_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f000 80a7 	beq.w	8007ee0 <_vfiprintf_r+0x1ec>
 8007d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d94:	445a      	add	r2, fp
 8007d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d98:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 809f 	beq.w	8007ee0 <_vfiprintf_r+0x1ec>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dac:	f10a 0a01 	add.w	sl, sl, #1
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9307      	str	r3, [sp, #28]
 8007db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc2:	4853      	ldr	r0, [pc, #332]	@ (8007f10 <_vfiprintf_r+0x21c>)
 8007dc4:	f7f8 fa04 	bl	80001d0 <memchr>
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	b9d8      	cbnz	r0, 8007e04 <_vfiprintf_r+0x110>
 8007dcc:	06d1      	lsls	r1, r2, #27
 8007dce:	bf44      	itt	mi
 8007dd0:	2320      	movmi	r3, #32
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd6:	0713      	lsls	r3, r2, #28
 8007dd8:	bf44      	itt	mi
 8007dda:	232b      	movmi	r3, #43	@ 0x2b
 8007ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de0:	f89a 3000 	ldrb.w	r3, [sl]
 8007de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de6:	d015      	beq.n	8007e14 <_vfiprintf_r+0x120>
 8007de8:	9a07      	ldr	r2, [sp, #28]
 8007dea:	4654      	mov	r4, sl
 8007dec:	2000      	movs	r0, #0
 8007dee:	f04f 0c0a 	mov.w	ip, #10
 8007df2:	4621      	mov	r1, r4
 8007df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df8:	3b30      	subs	r3, #48	@ 0x30
 8007dfa:	2b09      	cmp	r3, #9
 8007dfc:	d94b      	bls.n	8007e96 <_vfiprintf_r+0x1a2>
 8007dfe:	b1b0      	cbz	r0, 8007e2e <_vfiprintf_r+0x13a>
 8007e00:	9207      	str	r2, [sp, #28]
 8007e02:	e014      	b.n	8007e2e <_vfiprintf_r+0x13a>
 8007e04:	eba0 0308 	sub.w	r3, r0, r8
 8007e08:	fa09 f303 	lsl.w	r3, r9, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	46a2      	mov	sl, r4
 8007e12:	e7d2      	b.n	8007dba <_vfiprintf_r+0xc6>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d19      	adds	r1, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfbb      	ittet	lt
 8007e20:	425b      	neglt	r3, r3
 8007e22:	f042 0202 	orrlt.w	r2, r2, #2
 8007e26:	9307      	strge	r3, [sp, #28]
 8007e28:	9307      	strlt	r3, [sp, #28]
 8007e2a:	bfb8      	it	lt
 8007e2c:	9204      	strlt	r2, [sp, #16]
 8007e2e:	7823      	ldrb	r3, [r4, #0]
 8007e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e32:	d10a      	bne.n	8007e4a <_vfiprintf_r+0x156>
 8007e34:	7863      	ldrb	r3, [r4, #1]
 8007e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e38:	d132      	bne.n	8007ea0 <_vfiprintf_r+0x1ac>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	1d1a      	adds	r2, r3, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	9203      	str	r2, [sp, #12]
 8007e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e46:	3402      	adds	r4, #2
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f20 <_vfiprintf_r+0x22c>
 8007e4e:	7821      	ldrb	r1, [r4, #0]
 8007e50:	2203      	movs	r2, #3
 8007e52:	4650      	mov	r0, sl
 8007e54:	f7f8 f9bc 	bl	80001d0 <memchr>
 8007e58:	b138      	cbz	r0, 8007e6a <_vfiprintf_r+0x176>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	eba0 000a 	sub.w	r0, r0, sl
 8007e60:	2240      	movs	r2, #64	@ 0x40
 8007e62:	4082      	lsls	r2, r0
 8007e64:	4313      	orrs	r3, r2
 8007e66:	3401      	adds	r4, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6e:	4829      	ldr	r0, [pc, #164]	@ (8007f14 <_vfiprintf_r+0x220>)
 8007e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e74:	2206      	movs	r2, #6
 8007e76:	f7f8 f9ab 	bl	80001d0 <memchr>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d03f      	beq.n	8007efe <_vfiprintf_r+0x20a>
 8007e7e:	4b26      	ldr	r3, [pc, #152]	@ (8007f18 <_vfiprintf_r+0x224>)
 8007e80:	bb1b      	cbnz	r3, 8007eca <_vfiprintf_r+0x1d6>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	3307      	adds	r3, #7
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	9303      	str	r3, [sp, #12]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e90:	443b      	add	r3, r7
 8007e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e94:	e76a      	b.n	8007d6c <_vfiprintf_r+0x78>
 8007e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	e7a8      	b.n	8007df2 <_vfiprintf_r+0xfe>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	3401      	adds	r4, #1
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4620      	mov	r0, r4
 8007eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb2:	3a30      	subs	r2, #48	@ 0x30
 8007eb4:	2a09      	cmp	r2, #9
 8007eb6:	d903      	bls.n	8007ec0 <_vfiprintf_r+0x1cc>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0c6      	beq.n	8007e4a <_vfiprintf_r+0x156>
 8007ebc:	9105      	str	r1, [sp, #20]
 8007ebe:	e7c4      	b.n	8007e4a <_vfiprintf_r+0x156>
 8007ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7f0      	b.n	8007eac <_vfiprintf_r+0x1b8>
 8007eca:	ab03      	add	r3, sp, #12
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	462a      	mov	r2, r5
 8007ed0:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <_vfiprintf_r+0x228>)
 8007ed2:	a904      	add	r1, sp, #16
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f3af 8000 	nop.w
 8007eda:	4607      	mov	r7, r0
 8007edc:	1c78      	adds	r0, r7, #1
 8007ede:	d1d6      	bne.n	8007e8e <_vfiprintf_r+0x19a>
 8007ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ee2:	07d9      	lsls	r1, r3, #31
 8007ee4:	d405      	bmi.n	8007ef2 <_vfiprintf_r+0x1fe>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	059a      	lsls	r2, r3, #22
 8007eea:	d402      	bmi.n	8007ef2 <_vfiprintf_r+0x1fe>
 8007eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eee:	f7ff fc77 	bl	80077e0 <__retarget_lock_release_recursive>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	065b      	lsls	r3, r3, #25
 8007ef6:	f53f af1f 	bmi.w	8007d38 <_vfiprintf_r+0x44>
 8007efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007efc:	e71e      	b.n	8007d3c <_vfiprintf_r+0x48>
 8007efe:	ab03      	add	r3, sp, #12
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	462a      	mov	r2, r5
 8007f04:	4b05      	ldr	r3, [pc, #20]	@ (8007f1c <_vfiprintf_r+0x228>)
 8007f06:	a904      	add	r1, sp, #16
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 f879 	bl	8008000 <_printf_i>
 8007f0e:	e7e4      	b.n	8007eda <_vfiprintf_r+0x1e6>
 8007f10:	08008e08 	.word	0x08008e08
 8007f14:	08008e12 	.word	0x08008e12
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	08007ccf 	.word	0x08007ccf
 8007f20:	08008e0e 	.word	0x08008e0e

08007f24 <_printf_common>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	4616      	mov	r6, r2
 8007f2a:	4698      	mov	r8, r3
 8007f2c:	688a      	ldr	r2, [r1, #8]
 8007f2e:	690b      	ldr	r3, [r1, #16]
 8007f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bfb8      	it	lt
 8007f38:	4613      	movlt	r3, r2
 8007f3a:	6033      	str	r3, [r6, #0]
 8007f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f40:	4607      	mov	r7, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b10a      	cbz	r2, 8007f4a <_printf_common+0x26>
 8007f46:	3301      	adds	r3, #1
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	0699      	lsls	r1, r3, #26
 8007f4e:	bf42      	ittt	mi
 8007f50:	6833      	ldrmi	r3, [r6, #0]
 8007f52:	3302      	addmi	r3, #2
 8007f54:	6033      	strmi	r3, [r6, #0]
 8007f56:	6825      	ldr	r5, [r4, #0]
 8007f58:	f015 0506 	ands.w	r5, r5, #6
 8007f5c:	d106      	bne.n	8007f6c <_printf_common+0x48>
 8007f5e:	f104 0a19 	add.w	sl, r4, #25
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	6832      	ldr	r2, [r6, #0]
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dc26      	bgt.n	8007fba <_printf_common+0x96>
 8007f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	3b00      	subs	r3, #0
 8007f74:	bf18      	it	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	0692      	lsls	r2, r2, #26
 8007f7a:	d42b      	bmi.n	8007fd4 <_printf_common+0xb0>
 8007f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f80:	4641      	mov	r1, r8
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c8      	blx	r9
 8007f86:	3001      	adds	r0, #1
 8007f88:	d01e      	beq.n	8007fc8 <_printf_common+0xa4>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	6922      	ldr	r2, [r4, #16]
 8007f8e:	f003 0306 	and.w	r3, r3, #6
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	bf02      	ittt	eq
 8007f96:	68e5      	ldreq	r5, [r4, #12]
 8007f98:	6833      	ldreq	r3, [r6, #0]
 8007f9a:	1aed      	subeq	r5, r5, r3
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	bf0c      	ite	eq
 8007fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fa4:	2500      	movne	r5, #0
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bfc4      	itt	gt
 8007faa:	1a9b      	subgt	r3, r3, r2
 8007fac:	18ed      	addgt	r5, r5, r3
 8007fae:	2600      	movs	r6, #0
 8007fb0:	341a      	adds	r4, #26
 8007fb2:	42b5      	cmp	r5, r6
 8007fb4:	d11a      	bne.n	8007fec <_printf_common+0xc8>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e008      	b.n	8007fcc <_printf_common+0xa8>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	47c8      	blx	r9
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d103      	bne.n	8007fd0 <_printf_common+0xac>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	e7c6      	b.n	8007f62 <_printf_common+0x3e>
 8007fd4:	18e1      	adds	r1, r4, r3
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	2030      	movs	r0, #48	@ 0x30
 8007fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fde:	4422      	add	r2, r4
 8007fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fe8:	3302      	adds	r3, #2
 8007fea:	e7c7      	b.n	8007f7c <_printf_common+0x58>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	47c8      	blx	r9
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d0e6      	beq.n	8007fc8 <_printf_common+0xa4>
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7d9      	b.n	8007fb2 <_printf_common+0x8e>
	...

08008000 <_printf_i>:
 8008000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	7e0f      	ldrb	r7, [r1, #24]
 8008006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008008:	2f78      	cmp	r7, #120	@ 0x78
 800800a:	4691      	mov	r9, r2
 800800c:	4680      	mov	r8, r0
 800800e:	460c      	mov	r4, r1
 8008010:	469a      	mov	sl, r3
 8008012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008016:	d807      	bhi.n	8008028 <_printf_i+0x28>
 8008018:	2f62      	cmp	r7, #98	@ 0x62
 800801a:	d80a      	bhi.n	8008032 <_printf_i+0x32>
 800801c:	2f00      	cmp	r7, #0
 800801e:	f000 80d2 	beq.w	80081c6 <_printf_i+0x1c6>
 8008022:	2f58      	cmp	r7, #88	@ 0x58
 8008024:	f000 80b9 	beq.w	800819a <_printf_i+0x19a>
 8008028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800802c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008030:	e03a      	b.n	80080a8 <_printf_i+0xa8>
 8008032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008036:	2b15      	cmp	r3, #21
 8008038:	d8f6      	bhi.n	8008028 <_printf_i+0x28>
 800803a:	a101      	add	r1, pc, #4	@ (adr r1, 8008040 <_printf_i+0x40>)
 800803c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008040:	08008099 	.word	0x08008099
 8008044:	080080ad 	.word	0x080080ad
 8008048:	08008029 	.word	0x08008029
 800804c:	08008029 	.word	0x08008029
 8008050:	08008029 	.word	0x08008029
 8008054:	08008029 	.word	0x08008029
 8008058:	080080ad 	.word	0x080080ad
 800805c:	08008029 	.word	0x08008029
 8008060:	08008029 	.word	0x08008029
 8008064:	08008029 	.word	0x08008029
 8008068:	08008029 	.word	0x08008029
 800806c:	080081ad 	.word	0x080081ad
 8008070:	080080d7 	.word	0x080080d7
 8008074:	08008167 	.word	0x08008167
 8008078:	08008029 	.word	0x08008029
 800807c:	08008029 	.word	0x08008029
 8008080:	080081cf 	.word	0x080081cf
 8008084:	08008029 	.word	0x08008029
 8008088:	080080d7 	.word	0x080080d7
 800808c:	08008029 	.word	0x08008029
 8008090:	08008029 	.word	0x08008029
 8008094:	0800816f 	.word	0x0800816f
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	1d1a      	adds	r2, r3, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6032      	str	r2, [r6, #0]
 80080a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080a8:	2301      	movs	r3, #1
 80080aa:	e09d      	b.n	80081e8 <_printf_i+0x1e8>
 80080ac:	6833      	ldr	r3, [r6, #0]
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	1d19      	adds	r1, r3, #4
 80080b2:	6031      	str	r1, [r6, #0]
 80080b4:	0606      	lsls	r6, r0, #24
 80080b6:	d501      	bpl.n	80080bc <_printf_i+0xbc>
 80080b8:	681d      	ldr	r5, [r3, #0]
 80080ba:	e003      	b.n	80080c4 <_printf_i+0xc4>
 80080bc:	0645      	lsls	r5, r0, #25
 80080be:	d5fb      	bpl.n	80080b8 <_printf_i+0xb8>
 80080c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	da03      	bge.n	80080d0 <_printf_i+0xd0>
 80080c8:	232d      	movs	r3, #45	@ 0x2d
 80080ca:	426d      	negs	r5, r5
 80080cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080d0:	4859      	ldr	r0, [pc, #356]	@ (8008238 <_printf_i+0x238>)
 80080d2:	230a      	movs	r3, #10
 80080d4:	e011      	b.n	80080fa <_printf_i+0xfa>
 80080d6:	6821      	ldr	r1, [r4, #0]
 80080d8:	6833      	ldr	r3, [r6, #0]
 80080da:	0608      	lsls	r0, r1, #24
 80080dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80080e0:	d402      	bmi.n	80080e8 <_printf_i+0xe8>
 80080e2:	0649      	lsls	r1, r1, #25
 80080e4:	bf48      	it	mi
 80080e6:	b2ad      	uxthmi	r5, r5
 80080e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80080ea:	4853      	ldr	r0, [pc, #332]	@ (8008238 <_printf_i+0x238>)
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	bf14      	ite	ne
 80080f0:	230a      	movne	r3, #10
 80080f2:	2308      	moveq	r3, #8
 80080f4:	2100      	movs	r1, #0
 80080f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080fa:	6866      	ldr	r6, [r4, #4]
 80080fc:	60a6      	str	r6, [r4, #8]
 80080fe:	2e00      	cmp	r6, #0
 8008100:	bfa2      	ittt	ge
 8008102:	6821      	ldrge	r1, [r4, #0]
 8008104:	f021 0104 	bicge.w	r1, r1, #4
 8008108:	6021      	strge	r1, [r4, #0]
 800810a:	b90d      	cbnz	r5, 8008110 <_printf_i+0x110>
 800810c:	2e00      	cmp	r6, #0
 800810e:	d04b      	beq.n	80081a8 <_printf_i+0x1a8>
 8008110:	4616      	mov	r6, r2
 8008112:	fbb5 f1f3 	udiv	r1, r5, r3
 8008116:	fb03 5711 	mls	r7, r3, r1, r5
 800811a:	5dc7      	ldrb	r7, [r0, r7]
 800811c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008120:	462f      	mov	r7, r5
 8008122:	42bb      	cmp	r3, r7
 8008124:	460d      	mov	r5, r1
 8008126:	d9f4      	bls.n	8008112 <_printf_i+0x112>
 8008128:	2b08      	cmp	r3, #8
 800812a:	d10b      	bne.n	8008144 <_printf_i+0x144>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	07df      	lsls	r7, r3, #31
 8008130:	d508      	bpl.n	8008144 <_printf_i+0x144>
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	6861      	ldr	r1, [r4, #4]
 8008136:	4299      	cmp	r1, r3
 8008138:	bfde      	ittt	le
 800813a:	2330      	movle	r3, #48	@ 0x30
 800813c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008144:	1b92      	subs	r2, r2, r6
 8008146:	6122      	str	r2, [r4, #16]
 8008148:	f8cd a000 	str.w	sl, [sp]
 800814c:	464b      	mov	r3, r9
 800814e:	aa03      	add	r2, sp, #12
 8008150:	4621      	mov	r1, r4
 8008152:	4640      	mov	r0, r8
 8008154:	f7ff fee6 	bl	8007f24 <_printf_common>
 8008158:	3001      	adds	r0, #1
 800815a:	d14a      	bne.n	80081f2 <_printf_i+0x1f2>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	b004      	add	sp, #16
 8008162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	f043 0320 	orr.w	r3, r3, #32
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	4833      	ldr	r0, [pc, #204]	@ (800823c <_printf_i+0x23c>)
 8008170:	2778      	movs	r7, #120	@ 0x78
 8008172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	6831      	ldr	r1, [r6, #0]
 800817a:	061f      	lsls	r7, r3, #24
 800817c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008180:	d402      	bmi.n	8008188 <_printf_i+0x188>
 8008182:	065f      	lsls	r7, r3, #25
 8008184:	bf48      	it	mi
 8008186:	b2ad      	uxthmi	r5, r5
 8008188:	6031      	str	r1, [r6, #0]
 800818a:	07d9      	lsls	r1, r3, #31
 800818c:	bf44      	itt	mi
 800818e:	f043 0320 	orrmi.w	r3, r3, #32
 8008192:	6023      	strmi	r3, [r4, #0]
 8008194:	b11d      	cbz	r5, 800819e <_printf_i+0x19e>
 8008196:	2310      	movs	r3, #16
 8008198:	e7ac      	b.n	80080f4 <_printf_i+0xf4>
 800819a:	4827      	ldr	r0, [pc, #156]	@ (8008238 <_printf_i+0x238>)
 800819c:	e7e9      	b.n	8008172 <_printf_i+0x172>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	f023 0320 	bic.w	r3, r3, #32
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	e7f6      	b.n	8008196 <_printf_i+0x196>
 80081a8:	4616      	mov	r6, r2
 80081aa:	e7bd      	b.n	8008128 <_printf_i+0x128>
 80081ac:	6833      	ldr	r3, [r6, #0]
 80081ae:	6825      	ldr	r5, [r4, #0]
 80081b0:	6961      	ldr	r1, [r4, #20]
 80081b2:	1d18      	adds	r0, r3, #4
 80081b4:	6030      	str	r0, [r6, #0]
 80081b6:	062e      	lsls	r6, r5, #24
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0x1c0>
 80081bc:	6019      	str	r1, [r3, #0]
 80081be:	e002      	b.n	80081c6 <_printf_i+0x1c6>
 80081c0:	0668      	lsls	r0, r5, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0x1bc>
 80081c4:	8019      	strh	r1, [r3, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	4616      	mov	r6, r2
 80081cc:	e7bc      	b.n	8008148 <_printf_i+0x148>
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	6032      	str	r2, [r6, #0]
 80081d4:	681e      	ldr	r6, [r3, #0]
 80081d6:	6862      	ldr	r2, [r4, #4]
 80081d8:	2100      	movs	r1, #0
 80081da:	4630      	mov	r0, r6
 80081dc:	f7f7 fff8 	bl	80001d0 <memchr>
 80081e0:	b108      	cbz	r0, 80081e6 <_printf_i+0x1e6>
 80081e2:	1b80      	subs	r0, r0, r6
 80081e4:	6060      	str	r0, [r4, #4]
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	2300      	movs	r3, #0
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081f0:	e7aa      	b.n	8008148 <_printf_i+0x148>
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	4632      	mov	r2, r6
 80081f6:	4649      	mov	r1, r9
 80081f8:	4640      	mov	r0, r8
 80081fa:	47d0      	blx	sl
 80081fc:	3001      	adds	r0, #1
 80081fe:	d0ad      	beq.n	800815c <_printf_i+0x15c>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	079b      	lsls	r3, r3, #30
 8008204:	d413      	bmi.n	800822e <_printf_i+0x22e>
 8008206:	68e0      	ldr	r0, [r4, #12]
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	4298      	cmp	r0, r3
 800820c:	bfb8      	it	lt
 800820e:	4618      	movlt	r0, r3
 8008210:	e7a6      	b.n	8008160 <_printf_i+0x160>
 8008212:	2301      	movs	r3, #1
 8008214:	4632      	mov	r2, r6
 8008216:	4649      	mov	r1, r9
 8008218:	4640      	mov	r0, r8
 800821a:	47d0      	blx	sl
 800821c:	3001      	adds	r0, #1
 800821e:	d09d      	beq.n	800815c <_printf_i+0x15c>
 8008220:	3501      	adds	r5, #1
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	9903      	ldr	r1, [sp, #12]
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	42ab      	cmp	r3, r5
 800822a:	dcf2      	bgt.n	8008212 <_printf_i+0x212>
 800822c:	e7eb      	b.n	8008206 <_printf_i+0x206>
 800822e:	2500      	movs	r5, #0
 8008230:	f104 0619 	add.w	r6, r4, #25
 8008234:	e7f5      	b.n	8008222 <_printf_i+0x222>
 8008236:	bf00      	nop
 8008238:	08008e19 	.word	0x08008e19
 800823c:	08008e2a 	.word	0x08008e2a

08008240 <__sflush_r>:
 8008240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008248:	0716      	lsls	r6, r2, #28
 800824a:	4605      	mov	r5, r0
 800824c:	460c      	mov	r4, r1
 800824e:	d454      	bmi.n	80082fa <__sflush_r+0xba>
 8008250:	684b      	ldr	r3, [r1, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	dc02      	bgt.n	800825c <__sflush_r+0x1c>
 8008256:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008258:	2b00      	cmp	r3, #0
 800825a:	dd48      	ble.n	80082ee <__sflush_r+0xae>
 800825c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800825e:	2e00      	cmp	r6, #0
 8008260:	d045      	beq.n	80082ee <__sflush_r+0xae>
 8008262:	2300      	movs	r3, #0
 8008264:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008268:	682f      	ldr	r7, [r5, #0]
 800826a:	6a21      	ldr	r1, [r4, #32]
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	d030      	beq.n	80082d2 <__sflush_r+0x92>
 8008270:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	0759      	lsls	r1, r3, #29
 8008276:	d505      	bpl.n	8008284 <__sflush_r+0x44>
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800827e:	b10b      	cbz	r3, 8008284 <__sflush_r+0x44>
 8008280:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008282:	1ad2      	subs	r2, r2, r3
 8008284:	2300      	movs	r3, #0
 8008286:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008288:	6a21      	ldr	r1, [r4, #32]
 800828a:	4628      	mov	r0, r5
 800828c:	47b0      	blx	r6
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	d106      	bne.n	80082a2 <__sflush_r+0x62>
 8008294:	6829      	ldr	r1, [r5, #0]
 8008296:	291d      	cmp	r1, #29
 8008298:	d82b      	bhi.n	80082f2 <__sflush_r+0xb2>
 800829a:	4a2a      	ldr	r2, [pc, #168]	@ (8008344 <__sflush_r+0x104>)
 800829c:	410a      	asrs	r2, r1
 800829e:	07d6      	lsls	r6, r2, #31
 80082a0:	d427      	bmi.n	80082f2 <__sflush_r+0xb2>
 80082a2:	2200      	movs	r2, #0
 80082a4:	6062      	str	r2, [r4, #4]
 80082a6:	04d9      	lsls	r1, r3, #19
 80082a8:	6922      	ldr	r2, [r4, #16]
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	d504      	bpl.n	80082b8 <__sflush_r+0x78>
 80082ae:	1c42      	adds	r2, r0, #1
 80082b0:	d101      	bne.n	80082b6 <__sflush_r+0x76>
 80082b2:	682b      	ldr	r3, [r5, #0]
 80082b4:	b903      	cbnz	r3, 80082b8 <__sflush_r+0x78>
 80082b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80082b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ba:	602f      	str	r7, [r5, #0]
 80082bc:	b1b9      	cbz	r1, 80082ee <__sflush_r+0xae>
 80082be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d002      	beq.n	80082cc <__sflush_r+0x8c>
 80082c6:	4628      	mov	r0, r5
 80082c8:	f7ff fa9a 	bl	8007800 <_free_r>
 80082cc:	2300      	movs	r3, #0
 80082ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80082d0:	e00d      	b.n	80082ee <__sflush_r+0xae>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b0      	blx	r6
 80082d8:	4602      	mov	r2, r0
 80082da:	1c50      	adds	r0, r2, #1
 80082dc:	d1c9      	bne.n	8008272 <__sflush_r+0x32>
 80082de:	682b      	ldr	r3, [r5, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0c6      	beq.n	8008272 <__sflush_r+0x32>
 80082e4:	2b1d      	cmp	r3, #29
 80082e6:	d001      	beq.n	80082ec <__sflush_r+0xac>
 80082e8:	2b16      	cmp	r3, #22
 80082ea:	d11e      	bne.n	800832a <__sflush_r+0xea>
 80082ec:	602f      	str	r7, [r5, #0]
 80082ee:	2000      	movs	r0, #0
 80082f0:	e022      	b.n	8008338 <__sflush_r+0xf8>
 80082f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f6:	b21b      	sxth	r3, r3
 80082f8:	e01b      	b.n	8008332 <__sflush_r+0xf2>
 80082fa:	690f      	ldr	r7, [r1, #16]
 80082fc:	2f00      	cmp	r7, #0
 80082fe:	d0f6      	beq.n	80082ee <__sflush_r+0xae>
 8008300:	0793      	lsls	r3, r2, #30
 8008302:	680e      	ldr	r6, [r1, #0]
 8008304:	bf08      	it	eq
 8008306:	694b      	ldreq	r3, [r1, #20]
 8008308:	600f      	str	r7, [r1, #0]
 800830a:	bf18      	it	ne
 800830c:	2300      	movne	r3, #0
 800830e:	eba6 0807 	sub.w	r8, r6, r7
 8008312:	608b      	str	r3, [r1, #8]
 8008314:	f1b8 0f00 	cmp.w	r8, #0
 8008318:	dde9      	ble.n	80082ee <__sflush_r+0xae>
 800831a:	6a21      	ldr	r1, [r4, #32]
 800831c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800831e:	4643      	mov	r3, r8
 8008320:	463a      	mov	r2, r7
 8008322:	4628      	mov	r0, r5
 8008324:	47b0      	blx	r6
 8008326:	2800      	cmp	r0, #0
 8008328:	dc08      	bgt.n	800833c <__sflush_r+0xfc>
 800832a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833c:	4407      	add	r7, r0
 800833e:	eba8 0800 	sub.w	r8, r8, r0
 8008342:	e7e7      	b.n	8008314 <__sflush_r+0xd4>
 8008344:	dfbffffe 	.word	0xdfbffffe

08008348 <_fflush_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	690b      	ldr	r3, [r1, #16]
 800834c:	4605      	mov	r5, r0
 800834e:	460c      	mov	r4, r1
 8008350:	b913      	cbnz	r3, 8008358 <_fflush_r+0x10>
 8008352:	2500      	movs	r5, #0
 8008354:	4628      	mov	r0, r5
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	b118      	cbz	r0, 8008362 <_fflush_r+0x1a>
 800835a:	6a03      	ldr	r3, [r0, #32]
 800835c:	b90b      	cbnz	r3, 8008362 <_fflush_r+0x1a>
 800835e:	f7ff f827 	bl	80073b0 <__sinit>
 8008362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f3      	beq.n	8008352 <_fflush_r+0xa>
 800836a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800836c:	07d0      	lsls	r0, r2, #31
 800836e:	d404      	bmi.n	800837a <_fflush_r+0x32>
 8008370:	0599      	lsls	r1, r3, #22
 8008372:	d402      	bmi.n	800837a <_fflush_r+0x32>
 8008374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008376:	f7ff fa32 	bl	80077de <__retarget_lock_acquire_recursive>
 800837a:	4628      	mov	r0, r5
 800837c:	4621      	mov	r1, r4
 800837e:	f7ff ff5f 	bl	8008240 <__sflush_r>
 8008382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008384:	07da      	lsls	r2, r3, #31
 8008386:	4605      	mov	r5, r0
 8008388:	d4e4      	bmi.n	8008354 <_fflush_r+0xc>
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	059b      	lsls	r3, r3, #22
 800838e:	d4e1      	bmi.n	8008354 <_fflush_r+0xc>
 8008390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008392:	f7ff fa25 	bl	80077e0 <__retarget_lock_release_recursive>
 8008396:	e7dd      	b.n	8008354 <_fflush_r+0xc>

08008398 <__swhatbuf_r>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	460c      	mov	r4, r1
 800839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a0:	2900      	cmp	r1, #0
 80083a2:	b096      	sub	sp, #88	@ 0x58
 80083a4:	4615      	mov	r5, r2
 80083a6:	461e      	mov	r6, r3
 80083a8:	da0d      	bge.n	80083c6 <__swhatbuf_r+0x2e>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	bf14      	ite	ne
 80083b6:	2340      	movne	r3, #64	@ 0x40
 80083b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083bc:	2000      	movs	r0, #0
 80083be:	6031      	str	r1, [r6, #0]
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	b016      	add	sp, #88	@ 0x58
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	466a      	mov	r2, sp
 80083c8:	f000 f862 	bl	8008490 <_fstat_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	dbec      	blt.n	80083aa <__swhatbuf_r+0x12>
 80083d0:	9901      	ldr	r1, [sp, #4]
 80083d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083da:	4259      	negs	r1, r3
 80083dc:	4159      	adcs	r1, r3
 80083de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083e2:	e7eb      	b.n	80083bc <__swhatbuf_r+0x24>

080083e4 <__smakebuf_r>:
 80083e4:	898b      	ldrh	r3, [r1, #12]
 80083e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083e8:	079d      	lsls	r5, r3, #30
 80083ea:	4606      	mov	r6, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	d507      	bpl.n	8008400 <__smakebuf_r+0x1c>
 80083f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	2301      	movs	r3, #1
 80083fa:	6163      	str	r3, [r4, #20]
 80083fc:	b003      	add	sp, #12
 80083fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008400:	ab01      	add	r3, sp, #4
 8008402:	466a      	mov	r2, sp
 8008404:	f7ff ffc8 	bl	8008398 <__swhatbuf_r>
 8008408:	9f00      	ldr	r7, [sp, #0]
 800840a:	4605      	mov	r5, r0
 800840c:	4639      	mov	r1, r7
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff fa62 	bl	80078d8 <_malloc_r>
 8008414:	b948      	cbnz	r0, 800842a <__smakebuf_r+0x46>
 8008416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841a:	059a      	lsls	r2, r3, #22
 800841c:	d4ee      	bmi.n	80083fc <__smakebuf_r+0x18>
 800841e:	f023 0303 	bic.w	r3, r3, #3
 8008422:	f043 0302 	orr.w	r3, r3, #2
 8008426:	81a3      	strh	r3, [r4, #12]
 8008428:	e7e2      	b.n	80083f0 <__smakebuf_r+0xc>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	6020      	str	r0, [r4, #0]
 800842e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	9b01      	ldr	r3, [sp, #4]
 8008436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800843a:	b15b      	cbz	r3, 8008454 <__smakebuf_r+0x70>
 800843c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008440:	4630      	mov	r0, r6
 8008442:	f000 f837 	bl	80084b4 <_isatty_r>
 8008446:	b128      	cbz	r0, 8008454 <__smakebuf_r+0x70>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	431d      	orrs	r5, r3
 8008458:	81a5      	strh	r5, [r4, #12]
 800845a:	e7cf      	b.n	80083fc <__smakebuf_r+0x18>

0800845c <memmove>:
 800845c:	4288      	cmp	r0, r1
 800845e:	b510      	push	{r4, lr}
 8008460:	eb01 0402 	add.w	r4, r1, r2
 8008464:	d902      	bls.n	800846c <memmove+0x10>
 8008466:	4284      	cmp	r4, r0
 8008468:	4623      	mov	r3, r4
 800846a:	d807      	bhi.n	800847c <memmove+0x20>
 800846c:	1e43      	subs	r3, r0, #1
 800846e:	42a1      	cmp	r1, r4
 8008470:	d008      	beq.n	8008484 <memmove+0x28>
 8008472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800847a:	e7f8      	b.n	800846e <memmove+0x12>
 800847c:	4402      	add	r2, r0
 800847e:	4601      	mov	r1, r0
 8008480:	428a      	cmp	r2, r1
 8008482:	d100      	bne.n	8008486 <memmove+0x2a>
 8008484:	bd10      	pop	{r4, pc}
 8008486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800848a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800848e:	e7f7      	b.n	8008480 <memmove+0x24>

08008490 <_fstat_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d07      	ldr	r5, [pc, #28]	@ (80084b0 <_fstat_r+0x20>)
 8008494:	2300      	movs	r3, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	4611      	mov	r1, r2
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	f7f8 fd64 	bl	8000f6a <_fstat>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d102      	bne.n	80084ac <_fstat_r+0x1c>
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	b103      	cbz	r3, 80084ac <_fstat_r+0x1c>
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	bd38      	pop	{r3, r4, r5, pc}
 80084ae:	bf00      	nop
 80084b0:	20000a94 	.word	0x20000a94

080084b4 <_isatty_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	@ (80084d0 <_isatty_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f7f8 fd63 	bl	8000f8a <_isatty>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_isatty_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_isatty_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000a94 	.word	0x20000a94

080084d4 <_sbrk_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	@ (80084f0 <_sbrk_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f8 fd6c 	bl	8000fbc <_sbrk>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_sbrk_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_sbrk_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000a94 	.word	0x20000a94

080084f4 <_realloc_r>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	4680      	mov	r8, r0
 80084fa:	4615      	mov	r5, r2
 80084fc:	460c      	mov	r4, r1
 80084fe:	b921      	cbnz	r1, 800850a <_realloc_r+0x16>
 8008500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008504:	4611      	mov	r1, r2
 8008506:	f7ff b9e7 	b.w	80078d8 <_malloc_r>
 800850a:	b92a      	cbnz	r2, 8008518 <_realloc_r+0x24>
 800850c:	f7ff f978 	bl	8007800 <_free_r>
 8008510:	2400      	movs	r4, #0
 8008512:	4620      	mov	r0, r4
 8008514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008518:	f000 f81a 	bl	8008550 <_malloc_usable_size_r>
 800851c:	4285      	cmp	r5, r0
 800851e:	4606      	mov	r6, r0
 8008520:	d802      	bhi.n	8008528 <_realloc_r+0x34>
 8008522:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008526:	d8f4      	bhi.n	8008512 <_realloc_r+0x1e>
 8008528:	4629      	mov	r1, r5
 800852a:	4640      	mov	r0, r8
 800852c:	f7ff f9d4 	bl	80078d8 <_malloc_r>
 8008530:	4607      	mov	r7, r0
 8008532:	2800      	cmp	r0, #0
 8008534:	d0ec      	beq.n	8008510 <_realloc_r+0x1c>
 8008536:	42b5      	cmp	r5, r6
 8008538:	462a      	mov	r2, r5
 800853a:	4621      	mov	r1, r4
 800853c:	bf28      	it	cs
 800853e:	4632      	movcs	r2, r6
 8008540:	f7ff f94f 	bl	80077e2 <memcpy>
 8008544:	4621      	mov	r1, r4
 8008546:	4640      	mov	r0, r8
 8008548:	f7ff f95a 	bl	8007800 <_free_r>
 800854c:	463c      	mov	r4, r7
 800854e:	e7e0      	b.n	8008512 <_realloc_r+0x1e>

08008550 <_malloc_usable_size_r>:
 8008550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008554:	1f18      	subs	r0, r3, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfbc      	itt	lt
 800855a:	580b      	ldrlt	r3, [r1, r0]
 800855c:	18c0      	addlt	r0, r0, r3
 800855e:	4770      	bx	lr

08008560 <_init>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr

0800856c <_fini>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr
